
from enum import Enum


class CustomEnum(Enum):
    @classmethod
    def has_value(cls, value):
        return value in cls._value2member_map_


class Button(CustomEnum):
    """Enum for mouse buttons."""
    VK_LBUTTON = 0x01  # Left mouse button
    VK_RBUTTON = 0x02  # Right mouse button
    VK_MBUTTON = 0x04  # Middle mouse button
    VK_XBUTTON1 = 0x05  # Windows 2000/XP: X1 mouse button
    VK_XBUTTON2 = 0x06  # Windows 2000/XP: X2 mouse button

    LEFT = VK_LBUTTON
    RIGHT = VK_RBUTTON
    MIDDLE = VK_MBUTTON
    X1 = VK_XBUTTON1
    X2 = VK_XBUTTON2


class Key(CustomEnum):
    """Enum for keyboard keys."""
    VK_CANCEL = 0x03  # Control-break processing
    VK_BACK = 0x08  # BACKSPACE key
    VK_TAB = 0x09  # TAB key
    VK_CLEAR = 0x0C  # CLEAR key
    VK_RETURN = 0x0D  # ENTER key
    VK_SHIFT = 0x10  # SHIFT key
    VK_CONTROL = 0x11  # CTRL key
    VK_MENU = 0x12  # ALT key
    VK_PAUSE = 0x13  # PAUSE key
    VK_CAPITAL = 0x14  # CAPS LOCK key
    VK_KANA = 0x15  # IME Kana mode
    VK_HANGUEL = 0x15  # IME Hanguel mode (maintained for compatibility; use VK_HANGUL)
    VK_HANGUL = 0x15  # IME Hangul mode
    VK_IME_ON = 0x16  # IME On
    VK_JUNJA = 0x17  # IME Junja mode
    VK_FINAL = 0x18  # IME final mode
    VK_HANJA = 0x19  # IME Hanja mode
    VK_KANJI = 0x19  # IME Kanji mode
    VK_IME_OFF = 0x1A  # IME Off
    VK_ESCAPE = 0x1B  # ESC key
    VK_CONVERT = 0x1C  # IME convert
    VK_NONCONVERT = 0x1D  # IME nonconvert
    VK_ACCEPT = 0x1E  # IME accept
    VK_MODECHANGE = 0x1F  # IME mode change request
    VK_SPACE = 0x20  # SPACEBAR
    VK_PRIOR = 0x21  # PAGE UP key
    VK_NEXT = 0x22  # PAGE DOWN key
    VK_END = 0x23  # END key
    VK_HOME = 0x24  # HOME key
    VK_LEFT = 0x25  # LEFT ARROW key
    VK_UP = 0x26  # UP ARROW key
    VK_RIGHT = 0x27  # RIGHT ARROW key
    VK_DOWN = 0x28  # DOWN ARROW key
    VK_SELECT = 0x29  # SELECT key
    VK_PRINT = 0x2A  # PRINT key
    VK_EXECUTE = 0x2B  # EXECUTE key
    VK_SNAPSHOT = 0x2C  # PRINT SCREEN key
    VK_INSERT = 0x2D  # INS key
    VK_DELETE = 0x2E  # DEL key
    VK_HELP = 0x2F  # HELP key
    VK_0 = 0x30  # 0 key
    VK_1 = 0x31  # 1 key
    VK_2 = 0x32  # 2 key
    VK_3 = 0x33  # 3 key
    VK_4 = 0x34  # 4 key
    VK_5 = 0x35  # 5 key
    VK_6 = 0x36  # 6 key
    VK_7 = 0x37  # 7 key
    VK_8 = 0x38  # 8 key
    VK_9 = 0x39  # 9 key
    VK_A = 0x41  # A key
    VK_B = 0x42  # B key
    VK_C = 0x43  # C key
    VK_D = 0x44  # D key
    VK_E = 0x45  # E key
    VK_F = 0x46  # F key
    VK_G = 0x47  # G key
    VK_H = 0x48  # H key
    VK_I = 0x49  # I key
    VK_J = 0x4A  # J key
    VK_K = 0x4B  # K key
    VK_L = 0x4C  # L key
    VK_M = 0x4D  # M key
    VK_N = 0x4E  # N key
    VK_O = 0x4F  # O key
    VK_P = 0x50  # P key
    VK_Q = 0x51  # Q key
    VK_R = 0x52  # R key
    VK_S = 0x53  # S key
    VK_T = 0x54  # T key
    VK_U = 0x55  # U key
    VK_V = 0x56  # V key
    VK_W = 0x57  # W key
    VK_X = 0x58  # X key
    VK_Y = 0x59  # Y key
    VK_Z = 0x5A  # Z key
    VK_LWIN = 0x5B  # Left Windows key (Natural keyboard)
    VK_RWIN = 0x5C  # Right Windows key (Natural keyboard)
    VK_APPS = 0x5D  # Applications key (Natural keyboard)
    VK_SLEEP = 0x5F  # Computer Sleep key
    VK_NUMPAD0 = 0x60  # Numeric keypad 0 key
    VK_NUMPAD1 = 0x61  # Numeric keypad 1 key
    VK_NUMPAD2 = 0x62  # Numeric keypad 2 key
    VK_NUMPAD3 = 0x63  # Numeric keypad 3 key
    VK_NUMPAD4 = 0x64  # Numeric keypad 4 key
    VK_NUMPAD5 = 0x65  # Numeric keypad 5 key
    VK_NUMPAD6 = 0x66  # Numeric keypad 6 key
    VK_NUMPAD7 = 0x67  # Numeric keypad 7 key
    VK_NUMPAD8 = 0x68  # Numeric keypad 8 key
    VK_NUMPAD9 = 0x69  # Numeric keypad 9 key
    VK_MULTIPLY = 0x6A  # Multiply key
    VK_ADD = 0x6B  # Add key
    VK_SEPARATOR = 0x6C  # Separator key
    VK_SUBTRACT = 0x6D  # Subtract key
    VK_DECIMAL = 0x6E  # Decimal key
    VK_DIVIDE = 0x6F  # Divide key
    VK_F1 = 0x70  # F1 key
    VK_F2 = 0x71  # F2 key
    VK_F3 = 0x72  # F3 key
    VK_F4 = 0x73  # F4 key
    VK_F5 = 0x74  # F5 key
    VK_F6 = 0x75  # F6 key
    VK_F7 = 0x76  # F7 key
    VK_F8 = 0x77  # F8 key
    VK_F9 = 0x78  # F9 key
    VK_F10 = 0x79  # F10 key
    VK_F11 = 0x7A  # F11 key
    VK_F12 = 0x7B  # F12 key
    VK_F13 = 0x7C  # F13 key
    VK_F14 = 0x7D  # F14 key
    VK_F15 = 0x7E  # F15 key
    VK_F16 = 0x7F  # F16 key
    VK_F17 = 0x80  # F17 key
    VK_F18 = 0x81  # F18 key
    VK_F19 = 0x82  # F19 key
    VK_F20 = 0x83  # F20 key
    VK_F21 = 0x84  # F21 key
    VK_F22 = 0x85  # F22 key
    VK_F23 = 0x86  # F23 key
    VK_F24 = 0x87  # F24 key
    VK_NUMLOCK = 0x90  # NUM LOCK key
    VK_SCROLL = 0x91  # SCROLL LOCK key
    VK_LSHIFT = 0xA0  # Left SHIFT key
    VK_RSHIFT = 0xA1  # Right SHIFT key
    VK_LCONTROL = 0xA2  # Left CONTROL key
    VK_RCONTROL = 0xA3  # Right CONTROL key
    VK_LMENU = 0xA4  # Left MENU key
    VK_RMENU = 0xA5  # Right MENU key
    VK_BROWSER_BACK = 0xA6  # Browser Back key
    VK_BROWSER_FORWARD = 0xA7  # Browser Forward key
    VK_BROWSER_REFRESH = 0xA8  # Browser Refresh key
    VK_BROWSER_STOP = 0xA9  # Browser Stop key
    VK_BROWSER_SEARCH = 0xAA  # Browser Search key
    VK_BROWSER_FAVORITES = 0xAB  # Browser Favorites key
    VK_BROWSER_HOME = 0xAC  # Browser Start and Home key
    VK_VOLUME_MUTE = 0xAD  # Volume Mute key
    VK_VOLUME_DOWN = 0xAE  # Volume Down key
    VK_VOLUME_UP = 0xAF  # Volume Up key
    VK_MEDIA_NEXT_TRACK = 0xB0  # Next Track key
    VK_MEDIA_PREV_TRACK = 0xB1  # Previous Track key
    VK_MEDIA_STOP = 0xB2  # Stop Media key
    VK_MEDIA_PLAY_PAUSE = 0xB3  # Play/Pause Media key
    VK_LAUNCH_MAIL = 0xB4  # Start Mail key
    VK_LAUNCH_MEDIA_SELECT = 0xB5  # Select Media key
    VK_LAUNCH_APP1 = 0xB6  # Start Application 1 key
    VK_LAUNCH_APP2 = 0xB7  # Start Application 2 key
    VK_OEM_1 = 0xBA  # Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ';:' key
    VK_OEM_PLUS = 0xBB  # For any country/region, the '+' key
    VK_OEM_COMMA = 0xBC  # For any country/region, the ',' key
    VK_OEM_MINUS = 0xBD  # For any country/region, the '-' key
    VK_OEM_PERIOD = 0xBE  # For any country/region, the '.' key
    VK_OEM_2 = 0xBF  # Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '/?' key
    VK_OEM_3 = 0xC0  # Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '`~' key
    VK_OEM_4 = 0xDB  # Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '[{' key
    VK_OEM_5 = 0xDC  # Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the '\|' key
    VK_OEM_6 = 0xDD  # Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the ']}' key
    VK_OEM_7 = 0xDE  # Used for miscellaneous characters; it can vary by keyboard. For the US standard keyboard, the 'single-quote/double-quote' key
    VK_OEM_8 = 0xDF  # Used for miscellaneous characters; it can vary by keyboard.
    VK_OEM_102 = 0xE2  # The <> keys on the US standard keyboard, or the \\| key on the non-US 102-key keyboard
    VK_PROCESSKEY = 0xE5  # IME PROCESS key
    VK_PACKET = 0xE7  # Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
    VK_ATTN = 0xF6  # Attn key
    VK_CRSEL = 0xF7  # CrSel key
    VK_EXSEL = 0xF8  # ExSel key
    VK_EREOF = 0xF9  # Erase EOF key
    VK_PLAY = 0xFA  # Play key
    VK_ZOOM = 0xFB  # Zoom key
    VK_NONAME = 0xFC  # Reserved
    VK_PA1 = 0xFD  # PA1 key
    VK_OEM_CLEAR = 0xFE  # Clear key

    VK_ALT = VK_MENU  # Alt key


class Message(CustomEnum):
    WM_NULL = 0x0000  # No message
    WM_CREATE = 0x0001  # Sent when a window is being created
    WM_DESTROY = 0x0002  # Sent when a window is being destroyed
    WM_MOVE = 0x0003  # Sent when a window is being moved
    WM_SIZE = 0x0005  # Sent when a window is being sized
    WM_ACTIVATE = 0x0006  # Sent when a window is being activated or deactivated
    WM_SETFOCUS = 0x0007  # Sent when a window receives the keyboard focus
    WM_KILLFOCUS = 0x0008  # Sent when a window loses the keyboard focus
    WM_ENABLE = 0x000a  # Sent when a window is being enabled or disabled
    WM_SETREDRAW = 0x000b  # Sent when a window is being redrawn
    WM_SETTEXT = 0x000c  # Sent when a window is changing its text
    WM_GETTEXT = 0x000d  # Sent when a window is reading its text
    WM_GETTEXTLENGTH = 0x000e  # Sent when a window is reading its text length
    WM_PAINT = 0x000f  # Sent when a window needs to be painted
    WM_CLOSE = 0x0010  # Sent when a window is closing
    WM_QUERYENDSESSION = 0x0011  # Sent when a window is about to close
    WM_QUIT = 0x0012  # Sent when a window is exiting
    WM_QUERYOPEN = 0x0013  # Sent to an application when the user requests a new window for that application
    WM_ERASEBKGND = 0x0014  # Sent to a window when its background must be erased
    WM_SYSCOLORCHANGE = 0x0015  # Sent to all top-level windows after the system colors have been updated
    WM_ENDSESSION = 0x0016  # Sent to an application when the user logs off
    WM_SHOWWINDOW = 0x0018  # Sent to a window when its show state changes
    WM_CTLCOLOR = 0x0019  # Sent to the parent window of a child window when the child window's color has changed
    WM_WININICHANGE = 0x001a  # Sent when the user changes system-wide parameters
    WM_DEVMODECHANGE = 0x001b  # Sent to all top-level windows after the user changes device-mode settings
    WM_ACTIVATEAPP = 0x001c  # Sent when a window is activated or deactivated
    WM_FONTCHANGE = 0x001d  # Sent when the system font is changed
    WM_TIMECHANGE = 0x001e  # Sent when the time is changed
    WM_CANCELMODE = 0x001f  # Sent when the user cancels the mode change
    WM_SETCURSOR = 0x0020  # Sent when the cursor is in an inactive window
    WM_MOUSEACTIVATE = 0x0021  # Sent when the user activates the mouse
    WM_CHILDACTIVATE = 0x0022  # Sent to a child window when the user clicks the window's title bar
    WM_QUEUESYNC = 0x0023  # Sent by a computer-based training (CBT) application to separate user-input messages from other messages
    WM_GETMINMAXINFO = 0x0024  # Sent to a window when the size or position of the window is about to change
    WM_PAINTICON = 0x0026  # Sent to a minimized (iconic) window when the window is about to be restored
    WM_ICONERASEBKGND = 0x0027  # Sent to a minimized window when the background of the icon must be filled in
    WM_NEXTDLGCTL = 0x0028  # Sent to a window when the user chooses a different control from the control
    WM_SPOOLERSTATUS = 0x002a  # Sent from Print Manager whenever a job is added to or removed from the Print Manager queue
    WM_DRAWITEM = 0x002b  # Sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed
    WM_MEASUREITEM = 0x002c  # Sent to the owner of a list box or combo box when the owner needs a size or an item's position
    WM_DELETEITEM = 0x002d  # Sent to a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message
    WM_VKEYTOITEM = 0x002e  # Sent to the owner of a list box or combo box when a key is typed
    WM_CHARTOITEM = 0x002f  # Sent to the owner of a list box when a character is typed
    WM_SETFONT = 0x0030  # Sent to the window associated with a combo box, list box, list view control, or menu when the control's font is changed
    WM_GETFONT = 0x0031  # Sent to the window associated with a combo box, list box, list view control, or menu when a font is requested
    WM_SETHOTKEY = 0x0032  # Sent to a window when its hot key is activated
    WM_GETHOTKEY = 0x0033  # Sent to a window associated with a hot key when the hot key is activated
    WM_QUERYDRAGICON = 0x0037  # Sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor.
    WM_COMPAREITEM = 0x0039  # Sent to the owner of a list box when the user selects a list box item
    WM_GETOBJECT = 0x003d  # Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message
    WM_COMPACTING = 0x0041  # Sent to all top-level windows when the system compacts the memory by removing pages.
    WM_COMMNOTIFY = 0x0044  # Sent to all top-level windows registered for a specific com port when a communications event occurs.
    WM_WINDOWPOSCHANGING = 0x0046  # Sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
    WM_WINDOWPOSCHANGED = 0x0047  # Sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
    WM_POWER = 0x0048  # Sent to all top-level windows when the system is about to enter a sleep state.
    WM_COPYGLOBALDATA = 0x0049  # Sent to the clipboard owner when a call to the SetClipboardData function fails.
    WM_COPYDATA = 0x004a  # Sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
    WM_CANCELJOURNAL = 0x004b  # Sent to an application when a window or an application makes a request to terminate an input loop
    WM_NOTIFY = 0x004e  # Sent by a common control to its parent window when an event has occurred or the control requires some information.
    WM_INPUTLANGCHANGEREQUEST = 0x0050  # Sent to the topmost affected window after an application's input language has been changed by the user.
    WM_INPUTLANGCHANGE = 0x0051  # Sent to the topmost affected window when the IME hotkey is pressed. A window receives this message through its WindowProc function.
    WM_TCARD = 0x0052  # Sent to the topmost affected window when the user presses a key that does not make use of the ALT key. A window receives this message through its WindowProc function.
    WM_HELP = 0x0053  # Sent to the owner of a list box or combo box when the user double-clicks the list box or combo box. A window receives this message through its WindowProc function.
    WM_USERCHANGED = 0x0054  # Sent to all windows after the user changes the system or application preferences.
    WM_NOTIFYFORMAT = 0x0055  # Sent to the current active window from the application when the user changes the application's current input language.
    WM_CONTEXTMENU = 0x007b  # Sent when the user right-clicks the mouse.
    WM_STYLECHANGING = 0x007c  # Sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
    WM_STYLECHANGED = 0x007d  # Sent to a window after the SetWindowLong function has changed one or more of the window's styles
    WM_DISPLAYCHANGE = 0x007e  # Sent to all windows when the display resolution has changed.
    WM_GETICON = 0x007f  # An application sends a WM_GETICON message to obtain a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
    WM_SETICON = 0x0080  # An application sends a WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
    WM_NCCREATE = 0x0081  # The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
    WM_NCDESTROY = 0x0082  # The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
    WM_NCCALCSIZE = 0x0083  # The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
    WM_NCHITTEST = 0x0084  # The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
    WM_NCPAINT = 0x0085  # The WM_NCPAINT message is sent to a window when its frame must be painted.
    WM_NCACTIVATE = 0x0086  # The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
    WM_GETDLGCODE = 0x0087  # The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
    WM_SYNCPAINT = 0x0088  # The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
    WM_NCMOUSEMOVE = 0x00a0  # The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCLBUTTONDOWN = 0x00a1  # The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCLBUTTONUP = 0x00a2  # The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCLBUTTONDBLCLK = 0x00a3  # The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCRBUTTONDOWN = 0x00a4  # The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCRBUTTONUP = 0x00a5  # The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCRBUTTONDBLCLK = 0x00a6  # The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCMBUTTONDOWN = 0x00a7  # The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCMBUTTONUP = 0x00a8  # The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCMBUTTONDBLCLK = 0x00a9  # The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCXBUTTONDOWN = 0x00ab  # The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCXBUTTONUP = 0x00ac  # The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    WM_NCXBUTTONDBLCLK = 0x00ad  # The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
    EM_GETSEL = 0x00b0  # The EM_GETSEL message retrieves the character positions of the selection in the specified edit control.
    EM_SETSEL = 0x00b1  # The EM_SETSEL message sets the character positions of the selection in the specified edit control.
    EM_GETRECT = 0x00b2  # The EM_GETRECT message retrieves the coordinates of the upper-left and lower-right corners of the current selection in the specified edit control.
    EM_SETRECT = 0x00b3  # The EM_SETRECT message sets the coordinates of the upper-left and lower-right corners of the current selection in the specified edit control.
    EM_SETRECTNP = 0x00b4  # The EM_SETRECTNP message sets the coordinates of the upper-left and lower-right corners of the current selection in the specified edit control.
    EM_SCROLL = 0x00b5  # The EM_SCROLL message scrolls the specified edit control.
    EM_LINESCROLL = 0x00b6  # The EM_LINESCROLL message scrolls the specified edit control.
    EM_SCROLLCARET = 0x00b7  # The EM_SCROLLCARET message scrolls the specified edit control to the current caret position.
    EM_GETMODIFY = 0x00b8  # The EM_GETMODIFY message retrieves the modification state of the specified edit control.
    EM_SETMODIFY = 0x00b9  # The EM_SETMODIFY message sets the modification state of the specified edit control.
    EM_GETLINECOUNT = 0x00ba  # The EM_GETLINECOUNT message retrieves the number of lines in the specified edit control.
    EM_LINEINDEX = 0x00bb  # The EM_LINEINDEX message retrieves the line index of the specified character in the specified edit control.
    EM_SETHANDLE = 0x00bc  # The EM_SETHANDLE message sets the handle of the specified edit control.
    EM_GETHANDLE = 0x00bd  # The EM_GETHANDLE message retrieves the handle of the specified edit control.
    EM_GETTHUMB = 0x00be  # The EM_GETTHUMB message retrieves the number of characters in the specified edit control.
    EM_LINELENGTH = 0x00c1  # The EM_LINELENGTH message retrieves the length, in characters, of the specified line in the specified edit control.
    EM_REPLACESEL = 0x00c2  # The EM_REPLACESEL message replaces the current selection in the specified edit control with the specified text.
    EM_SETFONT = 0x00c3  # The EM_SETFONT message sets the font of the specified edit control.
    EM_GETLINE = 0x00c4  # The EM_GETLINE message retrieves the text of the specified line in the specified edit control.
    EM_LIMITTEXT = 0x00c5  # The EM_LIMITTEXT message limits the length of the specified edit control.
    EM_SETLIMITTEXT = 0x00c5  # The EM_SETLIMITTEXT message limits the length of the specified edit control.
    EM_CANUNDO = 0x00c6  # The EM_CANUNDO message retrieves the undo state of the specified edit control.
    EM_UNDO = 0x00c7  # The EM_UNDO message undoes the last action in the specified edit control.
    EM_FMTLINES = 0x00c8  # The EM_FMTLINES message formats the specified edit control.
    EM_LINEFROMCHAR = 0x00c9  # The EM_LINEFROMCHAR message retrieves the line index of the specified character in the specified edit control.
    EM_SETWORDBREAK = 0x00ca  # The EM_SETWORDBREAK message sets the word-break properties of the specified edit control.
    EM_SETTABSTOPS = 0x00cb  # The EM_SETTABSTOPS message sets the tab-stop positions of the specified edit control.
    EM_SETPASSWORDCHAR = 0x00cc  # The EM_SETPASSWORDCHAR message sets the password character of the specified edit control.
    EM_EMPTYUNDOBUFFER = 0x00cd  # The EM_EMPTYUNDOBUFFER message empties the undo buffer of the specified edit control.
    EM_GETFIRSTVISIBLELINE = 0x00ce  # The EM_GETFIRSTVISIBLELINE message retrieves the index of the first visible line in the specified edit control.
    EM_SETREADONLY = 0x00cf  # The EM_SETREADONLY message sets the read-only state of the specified edit control.
    EM_SETWORDBREAKPROC = 0x00d0  # The EM_SETWORDBREAKPROC message sets the word-break procedure of the specified edit control.
    EM_GETWORDBREAKPROC = 0x00d1  # The EM_GETWORDBREAKPROC message retrieves the word-break procedure of the specified edit control.
    EM_GETPASSWORDCHAR = 0x00d2  # The EM_GETPASSWORDCHAR message retrieves the password character of the specified edit control.
    EM_SETMARGINS = 0x00d3  # The EM_SETMARGINS message sets the margins of the specified edit control.
    EM_GETMARGINS = 0x00d4  # The EM_GETMARGINS message retrieves the margins of the specified edit control.
    EM_GETLIMITTEXT = 0x00d5  # The EM_GETLIMITTEXT message retrieves the maximum length, in characters, of the specified edit control.
    EM_POSFROMCHAR = 0x00d6  # The EM_POSFROMCHAR message retrieves the coordinates of the specified character in the specified edit control.
    EM_CHARFROMPOS = 0x00d7  # The EM_CHARFROMPOS message retrieves the character index of the specified coordinates in the specified edit control.
    EM_SETIMESTATUS = 0x00d8  # The EM_SETIMESTATUS message sets the IME status of the specified edit control.
    EM_GETIMESTATUS = 0x00d9  # The EM_GETIMESTATUS message retrieves the IME status of the specified edit control.
    SBM_SETPOS = 0x00e0  # The SBM_SETPOS message sets the scroll box position.
    SBM_GETPOS = 0x00e1  # The SBM_GETPOS message retrieves the scroll box position.
    SBM_SETRANGE = 0x00e2  # The SBM_SETRANGE message sets the scroll box range.
    SBM_GETRANGE = 0x00e3  # The SBM_GETRANGE message retrieves the scroll box range.
    SBM_ENABLE_ARROWS = 0x00e4  # The SBM_ENABLE_ARROWS message enables or disables the scroll box arrows.
    SBM_SETRANGEREDRAW = 0x00e6  # The SBM_SETRANGEREDRAW message sets the scroll box range and redraws the scroll box.
    SBM_SETSCROLLINFO = 0x00e9  # The SBM_SETSCROLLINFO message sets the scroll box scroll information.
    SBM_GETSCROLLINFO = 0x00ea  # The SBM_GETSCROLLINFO message retrieves the scroll box scroll information.
    SBM_GETSCROLLBARINFO = 0x00eb  # The SBM_GETSCROLLBARINFO message retrieves the scroll box scroll bar information.
    BM_GETCHECK = 0x00f0  # The BM_GETCHECK message retrieves the check state of the specified button.
    BM_SETCHECK = 0x00f1  # The BM_SETCHECK message sets the check state of the specified button.
    BM_GETSTATE = 0x00f2  # The BM_GETSTATE message retrieves the state of the specified button.
    BM_SETSTATE = 0x00f3  # The BM_SETSTATE message sets the state of the specified button.
    BM_SETSTYLE = 0x00f4  # The BM_SETSTYLE message sets the style of the specified button.
    BM_CLICK = 0x00f5  # The BM_CLICK message sends a click message to the specified button.
    BM_GETIMAGE = 0x00f6  # The BM_GETIMAGE message retrieves the image list index of the specified button.
    BM_SETIMAGE = 0x00f7  # The BM_SETIMAGE message sets the image list index of the specified button.
    BM_SETDONTCLICK = 0x00f8  # The BM_SETDONTCLICK message sets the don't click state of the specified button.
    WM_INPUT = 0x00ff  # The WM_INPUT message is sent to the owner window of a modal dialog box or menu that is receiving input.
    WM_KEYDOWN = 0x0100  # The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
    WM_KEYFIRST = 0x0100  # The WM_KEYFIRST message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
    WM_KEYUP = 0x0101  # The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.
    WM_CHAR = 0x0102  # The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
    WM_DEADCHAR = 0x0103  # The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.
    WM_SYSKEYDOWN = 0x0104  # The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
    WM_SYSKEYUP = 0x0105  # The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
    WM_SYSCHAR = 0x0106  # The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.
    WM_SYSDEADCHAR = 0x0107  # The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
    WM_UNICHAR = 0x0109  # The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed.
    WM_KEYLAST = WM_UNICHAR  # The WM_KEYLAST message is the last message that is posted to an application window. It occurs after the system and thread default windows have been created.
    WM_WNT_CONVERTREQUESTEX = 0x0109  # The WM_WNT_CONVERTREQUESTEX message is sent to the application when the application is about to change the current IME. A window receives this message through its WindowProc function.
    WM_CONVERTREQUEST = 0x010a  # The WM_CONVERTREQUEST message is sent to the application when the IME or the system needs to convert the specified string between two different code pages or character sets. A window receives this message through its WindowProc function.
    WM_CONVERTRESULT = 0x010b  # The WM_CONVERTRESULT message is sent to the application by the IME after the application has generated a WM_CONVERTREQUEST message. A window receives this message through its WindowProc function.
    WM_INTERIM = 0x010c  # The WM_INTERIM message is sent to the application when the IME generates a WM_IME_STARTCOMPOSITION message. A window receives this message through its WindowProc function.
    WM_IME_STARTCOMPOSITION = 0x010d  # The WM_IME_STARTCOMPOSITION message is sent to an application when the IME ends composition. A window receives this message through its WindowProc function.
    WM_IME_ENDCOMPOSITION = 0x010e  # The WM_IME_ENDCOMPOSITION message is sent to an application when the IME ends composition. A window receives this message through its WindowProc function.
    WM_IME_COMPOSITION = 0x010f  # The WM_IME_COMPOSITION message is sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
    WM_IME_KEYLAST = 0x010f  # The WM_IME_KEYLAST message is the last message that is posted to an application when the IME generates a WM_IME_COMPOSITION message. A window receives this message through its WindowProc function.
    WM_INITDIALOG = 0x0110  # The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
    WM_COMMAND = 0x0111  # The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.
    WM_SYSCOMMAND = 0x0112  # The WM_SYSCOMMAND message is sent to a window when the user makes a specified type of operation (such as clicking an icon, pressing a key on the keyboard, or clicking a mouse button) to indicate the type of operation that has occurred.
    WM_TIMER = 0x0113  # The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
    WM_HSCROLL = 0x0114  # The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
    WM_VSCROLL = 0x0115  # The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
    WM_INITMENU = 0x0116  # The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
    WM_INITMENUPOPUP = 0x0117  # The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.
    WM_SYSTIMER = 0x0118  # The WM_SYSTIMER message is a sent to the installing thread's message queue when a timer expires. When the user clicks the mouse pointer, the system sends a WM_SYSTIMER message to the installing thread's message queue.
    WM_MENUSELECT = 0x011f  # The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
    WM_MENUCHAR = 0x0120  # The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
    WM_ENTERIDLE = 0x0121  # The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
    WM_MENURBUTTONUP = 0x0122  # The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
    WM_MENUDRAG = 0x0123  # The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
    WM_MENUGETOBJECT = 0x0124  # The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
    WM_UNINITMENUPOPUP = 0x0125  # The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
    WM_MENUCOMMAND = 0x0126  # The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
    WM_CHANGEUISTATE = 0x0127  # The WM_CHANGEUISTATE message is sent to indicate that the user has changed the state of the UI.
    WM_UPDATEUISTATE = 0x0128  # The WM_UPDATEUISTATE message is sent to change the UI state for the specified window and all its child windows.
    WM_QUERYUISTATE = 0x0129  # The WM_QUERYUISTATE message is sent to retrieve the UI state for a window.
    WM_LBTRACKPOINT = 0x0131  # The WM_LBTRACKPOINT message is sent to the owner of a list box when the cursor is over the list box and a mouse button is pressed or released.
    WM_CTLCOLORMSGBOX = 0x0132  # The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.
    WM_CTLCOLOREDIT = 0x0133  # The WM_CTLCOLOREDIT message is sent to the owner window of a edit control when the control is about to be drawn. By responding to this message, the owner window can use the specified device context handle to set the text and background colors of the edit control.
    WM_CTLCOLORLISTBOX = 0x0134  # The WM_CTLCOLORLISTBOX message is sent to the owner window of a list box before the system draws the list box. By responding to this message, the owner window can set the text and background colors of the list box by using the specified display device context handle.
    WM_CTLCOLORBTN = 0x0135  # The WM_CTLCOLORBTN message is sent to the owner window of a button before it is drawn. By responding to this message, the owner window can set the text and background colors of the button by using the specified display device context handle.
    WM_CTLCOLORDLG = 0x0136  # The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.
    WM_CTLCOLORSCROLLBAR = 0x0137  # The WM_CTLCOLORSCROLLBAR message is sent to the owner window of a scroll bar control when the control is about to be drawn. By responding to this message, the owner window can use the display context handle to set the background color of the scroll bar control.
    WM_CTLCOLORSTATIC = 0x0138  # The WM_CTLCOLORSTATIC message is sent to the owner window of a static control when the control is about to be drawn. By responding to this message, the owner window can set the text and background colors of the static control by using the specified display device context handle.
    CB_GETEDITSEL = 0x0140  # The CB_GETEDITSEL message is sent to retrieve the address of the current selection in the edit control.
    CB_LIMITTEXT = 0x0141  # The CB_LIMITTEXT message is sent to the edit control to limit the text that can be selected in the edit control.
    CB_SETEDITSEL = 0x0142  # The CB_SETEDITSEL message is sent to change the selection in the edit control.
    CB_ADDSTRING = 0x0143  # The CB_ADDSTRING message is sent to add a new string to the list box of a combo box.
    CB_DELETESTRING = 0x0144  # The CB_DELETESTRING message is sent to the edit control to delete the current string from the list of strings.
    CB_DIR = 0x0145  # The CB_DIR message is sent to a combo box to make the list of strings to be displayed in the combo box more specific.
    CB_GETCOUNT = 0x0146  # The CB_GETCOUNT message is sent to a combo box to determine the number of items in the list of strings.
    CB_GETCURSEL = 0x0147  # The CB_GETCURSEL message is sent to a combo box to retrieve the index of the currently selected item in the list of strings.
    CB_GETLBTEXT = 0x0148  # The CB_GETLBTEXT message is sent to retrieve the text of the item in the list box of a combo box.
    CB_GETLBTEXTLEN = 0x0149  # The CB_GETLBTEXTLEN message is sent to determine the length, in characters, of the text associated with a specific item in the list box of a combo box.
    CB_INSERTSTRING = 0x014a  # The CB_INSERTSTRING message is sent to a combo box to insert a string into the list of strings.
    CB_RESETCONTENT = 0x014b  # The CB_RESETCONTENT message is sent to the combo box to remove all the strings from the list of strings.
    CB_FINDSTRING = 0x014c  # The CB_FINDSTRING message is sent to a combo box to find the first item in the list of strings that begins with the characters specified in the message.
    CB_SELECTSTRING = 0x014d  # The CB_SELECTSTRING message is sent to a combo box to select the item in the list of strings that matches the specified string.
    CB_SETCURSEL = 0x014e  # The CB_SETCURSEL message is sent to a combo box to select the specified item in the list of strings.
    CB_SHOWDROPDOWN = 0x014f  # The CB_SHOWDROPDOWN message is sent to a combo box to display the list of strings.
    CB_GETITEMDATA = 0x0150  # The CB_GETITEMDATA message is sent to a combo box to retrieve the data associated with a specified item in the list of strings.
    CB_SETITEMDATA = 0x0151  # The CB_SETITEMDATA message is sent to a combo box to associate a specified item with a specified data value.
    CB_GETDROPPEDCONTROLRECT = 0x0152  # The CB_GETDROPPEDCONTROLRECT message is sent to a combo box to retrieve the coordinates of the rectangle that bounds the drop-down list box.
    CB_SETITEMHEIGHT = 0x0153  # The CB_SETITEMHEIGHT message is sent to a combo box to set the height of the items in the drop-down list box.
    CB_GETITEMHEIGHT = 0x0154  # The CB_GETITEMHEIGHT message is sent to a combo box to retrieve the height of the items in the drop-down list box.
    CB_SETEXTENDEDUI = 0x0155  # The CB_SETEXTENDEDUI message is sent to a combo box to enable or disable the drop-down list box.
    CB_GETEXTENDEDUI = 0x0156  # The CB_GETEXTENDEDUI message is sent to a combo box to determine whether the drop-down list box is enabled.
    CB_GETDROPPEDSTATE = 0x0157  # The CB_GETDROPPEDSTATE message is sent to a combo box to determine whether the drop-down list box is visible.
    CB_FINDSTRINGEXACT = 0x0158  # The CB_FINDSTRINGEXACT message is sent to a combo box to search for an item in the list of strings that matches the specified string.
    CB_SETLOCALE = 0x0159  # The CB_SETLOCALE message is sent to a combo box to set the locale of the strings in the list of strings.
    CB_GETLOCALE = 0x015a  # The CB_GETLOCALE message is sent to a combo box to retrieve the locale of the strings in the list of strings.
    CB_GETTOPINDEX = 0x015b  # The CB_GETTOPINDEX message is sent to a combo box to retrieve the index of the first visible item in the drop-down list box.
    CB_SETTOPINDEX = 0x015c  # The CB_SETTOPINDEX message is sent to a combo box to set the index of the first visible item in the drop-down list box.
    CB_GETHORIZONTALEXTENT = 0x015d  # The CB_GETHORIZONTALEXTENT message is sent to a combo box to retrieve the horizontal position of the drop-down list box relative to the combo box.
    CB_SETHORIZONTALEXTENT = 0x015e  # The CB_SETHORIZONTALEXTENT message is sent to a combo box to set the horizontal position of the drop-down list box relative to the combo box.
    CB_GETDROPPEDWIDTH = 0x015f  # The CB_GETDROPPEDWIDTH message is sent to a combo box to retrieve the width, in pixels, of the drop-down list box.
    CB_SETDROPPEDWIDTH = 0x0160  # The CB_SETDROPPEDWIDTH message is sent to a combo box to set the width, in pixels, of the drop-down list box.
    CB_INITSTORAGE = 0x0161  # The CB_INITSTORAGE message is sent to a combo box to initialize the combo box's storage.
    CB_MULTIPLEADDSTRING = 0x0163  # The CB_MULTIPLEADDSTRING message is sent to a combo box to add a string to the list of strings.
    CB_GETCOMBOBOXINFO = 0x0164  # The CB_GETCOMBOBOXINFO message is sent to a combo box to retrieve information about the combo box.
    CB_MSGMAX = 0x0165  # The CB_MSGMAX message is sent to a combo box to determine the maximum message value.
    WM_MOUSEFIRST = 0x0200  # The WM_MOUSEFIRST message is the first message that is posted to a window when the mouse is moved, even when a mouse
    WM_MOUSEMOVE = 0x0200  # The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_LBUTTONDOWN = 0x0201  # The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_LBUTTONUP = 0x0202  # The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_LBUTTONDBLCLK = 0x0203  # The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_RBUTTONDOWN = 0x0204  # The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_RBUTTONUP = 0x0205  # The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_RBUTTONDBLCLK = 0x0206  # The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_MBUTTONDOWN = 0x0207  # The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_MBUTTONUP = 0x0208  # The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_MBUTTONDBLCLK = 0x0209  # The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_MOUSELAST = 0x0209  # The WM_MOUSELAST message is the last message that is posted to a window. It is posted to the window that contains the cursor.
    WM_MOUSEWHEEL = 0x020a  # The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
    WM_XBUTTONDOWN = 0x020b  # The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_XBUTTONUP = 0x020c  # The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_XBUTTONDBLCLK = 0x020d  # The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
    WM_MOUSEHWHEEL = 0x020e  # The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
    WM_PARENTNOTIFY = 0x0210  # The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
    WM_ENTERMENULOOP = 0x0211  # The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
    WM_EXITMENULOOP = 0x0212  # The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
    WM_NEXTMENU = 0x0213  # The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
    WM_SIZING = 0x0214  # The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
    WM_CAPTURECHANGED = 0x0215  # The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
    WM_MOVING = 0x0216  # The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
    WM_POWERBROADCAST = 0x0218  # The WM_POWERBROADCAST message is broadcast to all top-level windows whenever a power-management event occurs.
    WM_DEVICECHANGE = 0x0219  # The WM_DEVICECHANGE message is sent to all top-level windows whenever there is a change in the hardware configuration of a device.
    WM_MDICREATE = 0x0220  # The WM_MDICREATE message is sent when a new window is about to be created. It is sent to the window procedure of the new window. This message is sent before the window text and window frame are set, but after the window is created and just before the window is displayed.
    WM_MDIDESTROY = 0x0221  # The WM_MDIDESTROY message is sent to a window when the window is about to be destroyed. It is sent to the window procedure of the window being destroyed. It is sent after the system sends the WM_DESTROY message.
    WM_MDIACTIVATE = 0x0222  # The WM_MDIACTIVATE message is sent to a MDI client window to indicate which child window should be activated.
    WM_MDIRESTORE = 0x0223  # The WM_MDIRESTORE message is sent to a MDI client window to restore an MDI child window from maximized or minimized size.
    WM_MDINEXT = 0x0224  # The WM_MDINEXT message is sent to a MDI client window to activate the next or previous child window.
    WM_MDIMAXIMIZE = 0x0225  # The WM_MDIMAXIMIZE message is sent to a MDI client window to maximize an MDI child window.
    WM_MDITILE = 0x0226  # The WM_MDITILE message is sent to a MDI client window to arrange all of its MDI child windows in a tile format.
    WM_MDICASCADE = 0x0227  # The WM_MDICASCADE message is sent to a MDI client window to arrange all its child windows in a cascade format.
    WM_MDIICONARRANGE = 0x0228  # The WM_MDIICONARRANGE message is sent to a MDI client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
    WM_MDIGETACTIVE = 0x0229  # The WM_MDISETMENU message is sent to a top-level window to replace the system menu with the menu specified in the MDISetMenu message.
    WM_MDISETMENU = 0x0230  # The WM_MDIREFRESHMENU message is sent to a window when the user clicks the window's valid MDI child window close button. The window receives this message through its WindowProc function.
    WM_ENTERSIZEMOVE = 0x0231  # The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop.
    WM_EXITSIZEMOVE = 0x0232  # The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop.
    WM_DROPFILES = 0x0233  # The WM_DROPFILES message is sent to a window when one or more files are dropped on the window.
    WM_MDIREFRESHMENU = 0x0234  # The WM_MDIREFRESHMENU message is sent to a window when the user clicks the window's valid MDI child window close button. The window receives this message through its WindowProc function.
    WM_IME_REPORT = 0x0280  # The WM_IME_REPORT message is sent by the IME to the application when the application sends the WM_IME_SETCONTEXT message and when the IME needs to report a composition to the application.
    WM_IME_SETCONTEXT = 0x0281  # The WM_IME_SETCONTEXT message is sent to an application to set the context for the IME.
    WM_IME_NOTIFY = 0x0282  # The WM_IME_NOTIFY message is sent by the IME to the application when the application sends the WM_IME_SETCONTEXT message.
    WM_IME_CONTROL = 0x0283  # The WM_IME_CONTROL message is sent to an application when the IME window is creating or destroying itself.
    WM_IME_COMPOSITIONFULL = 0x0284  # The WM_IME_COMPOSITIONFULL message is sent to an application when the IME context is about to terminate.
    WM_IME_SELECT = 0x0285  # The WM_IME_SELECT message is sent to an application when the IME gets the focus.
    WM_IME_CHAR = 0x0286  # The WM_IME_CHAR message is sent to an application to provide commands to the IME.
    WM_IME_REQUEST = 0x0288  # The WM_IME_REQUEST message is sent by an application to the IME to request a change in one or more IME-specific globals.
    WM_IMEKEYDOWN = 0x0290  # The WM_IME_KEYDOWN message is sent to the IME by a window procedure when a nonsystem key is pressed while the IME has the focus.
    WM_IME_KEYDOWN = 0x0290  # The WM_IME_KEYDOWN message is sent to the IME by a window procedure when a nonsystem key is pressed while the IME has the focus.
    WM_IMEKEYUP = 0x0291  # The WM_IME_KEYUP message is sent to the IME by a window procedure when a nonsystem key is released while the IME has the focus.
    WM_IME_KEYUP = 0x0291  # The WM_IME_KEYUP message is sent to the IME by a window procedure when a nonsystem key is released while the IME has the focus.
    WM_NCMOUSEHOVER = 0x02a0  # The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
    WM_MOUSEHOVER = 0x02a1  # The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
    WM_NCMOUSELEAVE = 0x02a2  # The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
    WM_MOUSELEAVE = 0x02a3  # The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
    WM_CUT = 0x0300  # An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
    WM_COPY = 0x0301  # An application sends a WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
    WM_PASTE = 0x0302  # An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position.
    WM_CLEAR = 0x0303  # An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
    WM_UNDO = 0x0304  # An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
    WM_RENDERFORMAT = 0x0305  # An application sends the WM_RENDERFORMAT message to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
    WM_RENDERALLFORMATS = 0x0306  # An application sends the WM_RENDERALLFORMATS message to the clipboard owner before it performs a longer-than-usual operation, such as rendering content on the clipboard, that involves multiple clipboard formats. For example, an application uses the RenderAllFormats function to copy text to the clipboard and then uses the WM_PASTE message to paste the text, causing the clipboard to contain two types of data.
    WM_DESTROYCLIPBOARD = 0x0307  # An application sends the WM_DESTROYCLIPBOARD message to the clipboard owner if it is no longer using an clipboard.
    WM_DRAWCLIPBOARD = 0x0308  # An application sends the WM_DRAWCLIPBOARD message to the clipboard owner if the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard owner has requested data in CF_TEXT format.
    WM_PAINTCLIPBOARD = 0x0309  # An application sends the WM_PAINTCLIPBOARD message to the clipboard owner if the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard owner has requested data in CF_BITMAP format.
    WM_VSCROLLCLIPBOARD = 0x030a  # An application sends the WM_VSCROLLCLIPBOARD message to the clipboard owner if the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard owner has requested data in CF_TEXT format.
    WM_SIZECLIPBOARD = 0x030b  # An application sends the WM_SIZECLIPBOARD message to the clipboard owner if the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard owner has requested data in CF_TEXT format.
    WM_ASKCBFORMATNAME = 0x030c  # An application sends the WM_ASKCBFORMATNAME message to the clipboard owner to request the name of a CF_OWNERDISPLAY clipboard format.
    WM_CHANGECBCHAIN = 0x030d  # An application sends the WM_CHANGECBCHAIN message to the first window in the clipboard viewer chain when a window is being removed from the chain.
    WM_HSCROLLCLIPBOARD = 0x030e  # An application sends the WM_HSCROLLCLIPBOARD message to the clipboard owner if the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard owner has requested data in CF_TEXT format.
    WM_QUERYNEWPALETTE = 0x030f  # An application sends the WM_QUERYNEWPALETTE message to a window when the current palette is to be replaced with a different palette.
    WM_PALETTEISCHANGING = 0x0310  # This message informs a window that an application is about to change the palette in a given device context.
    WM_PALETTECHANGED = 0x0311  # This message is sent to all top-level windows when the color palette has changed.
    WM_HOTKEY = 0x0312  # The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
    WM_PRINT = 0x0317  # The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
    WM_PRINTCLIENT = 0x0318  # The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
    WM_APPCOMMAND = 0x0319  # The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
    WM_HANDHELDFIRST = 0x0358  # The WM_HANDHELDFIRST and WM_HANDHELDLAST messages are used by applications to pass other windows message when the system sends the WM_HANDHELP message.
    WM_HANDHELDLAST = 0x035f  # The WM_HANDHELDFIRST and WM_HANDHELDLAST messages are used by applications to pass other windows message when the system sends the WM_HANDHELP message.
    WM_AFXFIRST = 0x0360  # The WM_AFXFIRST and WM_AFXLAST messages are used by the Windows Forms to pass messages to their message handlers.
    WM_AFXLAST = 0x037f  # The WM_AFXFIRST and WM_AFXLAST messages are used by the Windows Forms to pass messages to their message handlers.
    WM_PENWINFIRST = 0x0380  # The WM_PENWINFIRST and WM_PENWINLAST messages are used by the Windows Pen input service.
    WM_RCRESULT = 0x0381  # The WM_RCRESULT message informs a window that the application is about to terminate and it provides an opportunity to de-allocate any resources that it has allocated.
    WM_HOOKRCRESULT = 0x0382  # The WM_HOOKRCRESULT message informs a window that the user has selected a new input locale.
    WM_GLOBALRCCHANGE = 0x0383  # The WM_GLOBALRCCHANGE message is broadcast to all top-level windows when the user changes the system locale.
    WM_PENMISCINFO = 0x0383  # The WM_PENMISCINFO message provides miscellaneous information about the pen input service.
    WM_SKB = 0x0384  # The WM_SKB message is used by the Windows function keys.
    WM_HEDITCTL = 0x0385  # The WM_HEDITCTL message is used by the Windows function keys.
    WM_PENCTL = 0x0385  # The WM_PENCTL message is used by the Windows function keys.
    WM_PENMISC = 0x0386  # The WM_PENMISC message is used by the Windows function keys.
    WM_CTLINIT = 0x0387  # The WM_CTLINIT message is used by the Windows function keys.
    WM_PENEVENT = 0x0388  # The WM_PENEVENT message is used by the Windows function keys.
    WM_PENWINLAST = 0x038f  # The WM_PENWINLAST message is used by the Windows function keys.
    DDM_SETFMT = 0x0400  # The DDM_SETFMT message is sent to the owner of a drag-and-drop manager (D&D manager) to set the default format of a drag-and-drop operation.
    DM_GETDEFID = 0x0400  # The WM_DM_GETDEFID message is sent to the owner of a drag-and-drop manager (D&D manager) to retrieve the default format of a drag-and-drop operation.
    NIN_SELECT = 0x0400  # The WM_NIN_SELECT message is sent to the owner of a taskbar icon when the user selects the taskbar icon.
    TBM_GETPOS = 0x0400  # The TBM_GETPOS message is sent to the owner of a toolbar to retrieve the position of the scroll box.
    WM_PSD_PAGESETUPDLG = 0x0400  # The WM_PSD_PAGESETUPDLG message is sent to the owner of a page setup dialog box when the user clicks the Page Setup button.
    WM_USER = 0x0400  # The WM_USER message is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+x, where x is an integer value.
    CBEM_INSERTITEMA = 0x0401  # The CBEM_INSERTITEMA message is sent to the parent window of a combo box to insert a new item in the list of combo box items.
    DDM_DRAW = 0x0401  # The DDM_DRAW message is sent to the owner of a drag-and-drop manager (D&D manager) to draw a drag-and-drop indicator.
    DM_SETDEFID = 0x0401  # The WM_DM_SETDEFID message is sent to the owner of a drag-and-drop manager (D&D manager) to set the default format of a drag-and-drop operation.
    HKM_SETHOTKEY = 0x0401  # The HKM_SETHOTKEY message is sent to the active window to set the hot key to be associated with a given command.
    PBM_SETRANGE = 0x0401  # The PBM_SETRANGE message is sent to the owner of a progress bar control to set the minimum and maximum values that the control can scroll through.
    RB_INSERTBANDA = 0x0401  # The RB_INSERTBANDA message is sent to a band object to insert a new band in the band object.
    SB_SETTEXTA = 0x0401  # The SB_SETTEXTA message is sent to a scroll bar to set the text of the scroll bar box.
    TB_ENABLEBUTTON = 0x0401  # The TB_ENABLEBUTTON message is sent to a toolbar to enable or disable a toolbar button.
    TBM_GETRANGEMIN = 0x0401  # The TBM_GETRANGEMIN message is sent to the owner of a toolbar to retrieve the minimum value allowed for the slider.
    TTM_ACTIVATE = 0x0401  # The TTM_ACTIVATE message is sent to a tooltip control when it is activated or deactivated.
    WM_CHOOSEFONT_GETLOGFONT = 0x0401  # The WM_CHOOSEFONT_GETLOGFONT message is sent to an application to retrieve the logical font that is associated with the current system font.
    WM_PSD_FULLPAGERECT = 0x0401  # The WM_PSD_FULLPAGERECT message is sent to the owner of a page setup dialog box when the user selects the Page Setup button.
    CBEM_SETIMAGELIST = 0x0402  # The CBEM_SETIMAGELIST message is sent to the parent window of a combo box to set the image list to use with the combo box.
    DDM_CLOSE = 0x0402  # The DDM_CLOSE message is sent to the owner of a drag-and-drop manager (D&D manager) to close the drag-and-drop indicator.
    DM_REPOSITION = 0x0402  # The WM_DM_REPOSITION message is sent to the owner of a drag-and-drop manager (D&D manager) to reposition the drag-and-drop indicator.
    HKM_GETHOTKEY = 0x0402  # The HKM_GETHOTKEY message is sent to the active window to retrieve the hot key associated with a given command.
    PBM_SETPOS = 0x0402  # The PBM_SETPOS message is sent to the owner of a progress bar control to set the current position of the progress bar.
    RB_DELETEBAND = 0x0402  # The RB_DELETEBAND message is sent to a band object to remove a band from the band object.
    SB_GETTEXTA = 0x0402  # The SB_GETTEXTA message is sent to a scroll bar to retrieve the text of the scroll bar box.
    TB_CHECKBUTTON = 0x0402  # The TB_CHECKBUTTON message is sent to a toolbar to check or uncheck a toolbar button.
    TBM_GETRANGEMAX = 0x0402  # The TBM_GETRANGEMAX message is sent to the owner of a toolbar to retrieve the maximum value allowed for the slider.
    WM_PSD_MINMARGINRECT = 0x0402  # The WM_PSD_MINMARGINRECT message is sent to the owner of a page setup dialog box when the user selects the Margins button.
    CBEM_GETIMAGELIST = 0x0403  # The CBEM_GETIMAGELIST message is sent to the parent window of a combo box to retrieve the image list associated with the combo box.
    DDM_BEGIN = 0x0403  # The DDM_BEGIN message is sent to the owner of a drag-and-drop manager (D&D manager) to indicate that the drag-and-drop operation has begun.
    HKM_SETRULES = 0x0403  # The HKM_SETRULES message is sent to the active window to set the hot key rules.
    PBM_DELTAPOS = 0x0403  # The PBM_DELTAPOS message is sent to the owner of a progress bar control to make the current position of the progress bar change by a specified amount.
    RB_GETBARINFO = 0x0403  # The RB_GETBARINFO message is sent to a band object to retrieve the band object's information.
    SB_GETTEXTLENGTHA = 0x0403  # The SB_GETTEXTLENGTHA message is sent to a scroll bar to retrieve the length, in characters, of the text of the scroll bar box.
    TBM_GETTIC = 0x0403  # The TBM_GETTIC message is sent to the owner of a toolbar to retrieve the position of a toolbar button.
    TB_PRESSBUTTON = 0x0403  # The TB_PRESSBUTTON message is sent to a toolbar to indicate that a toolbar button has been pressed.
    TTM_SETDELAYTIME = 0x0403  # The TTM_SETDELAYTIME message is sent to the active tooltip control to set the delay time for a particular tooltip type.
    WM_PSD_MARGINRECT = 0x0403  # The WM_PSD_MARGINRECT message is sent to the owner of a page setup dialog box when the user selects the Margins button.
    CBEM_GETITEMA = 0x0404  # The CBEM_GETITEMA message is sent to the parent window of a combo box to retrieve the information about a combo box item.
    DDM_END = 0x0404  # The DDM_END message is sent to the owner of a drag-and-drop manager (D&D manager) to indicate that the drag-and-drop operation has ended.
    PBM_SETSTEP = 0x0404  # The PBM_SETSTEP message is sent to the owner of a progress bar control to set the step value for a progress bar.
    RB_SETBARINFO = 0x0404  # The RB_SETBARINFO message is sent to a band object to set the band object's information.
    SB_SETPARTS = 0x0404  # The SB_SETPARTS message is sent to a scroll bar to set the number of pieces into which it is divided.
    TB_HIDEBUTTON = 0x0404  # The TB_HIDEBUTTON message is sent to a toolbar to hide a toolbar button.
    TBM_SETTIC = 0x0404  # The TBM_SETTIC message is sent to the owner of a toolbar to set the position of a toolbar button.
    TTM_ADDTOOLA = 0x0404  # The TTM_ADDTOOLA message is sent to a tooltip control to add a new tool to the tooltip.
    WM_PSD_GREEKTEXTRECT = 0x0404  # The WM_PSD_GREEKTEXTRECT message is sent to the owner of a page setup dialog box when the user selects the Paper Size button.
    CBEM_SETITEMA = 0x0405  # The CBEM_SETITEMA message is sent to the parent window of a combo box to set the information about a combo box item.
    PBM_STEPIT = 0x0405  # The PBM_STEPIT message is sent to the owner of a progress bar control to increment the current position of the progress bar by the specified step value.
    TB_INDETERMINATE = 0x0405  # The TB_INDETERMINATE message is sent to a toolbar to indicate that it is in an indeterminate state.
    TBM_SETPOS = 0x0405  # The TBM_SETPOS message is sent to the owner of a toolbar to set the position of a toolbar button.
    TTM_DELTOOLA = 0x0405  # The TTM_DELTOOLA message is sent to a tooltip control to delete a tool from the tooltip.
    WM_PSD_ENVSTAMPRECT = 0x0405  # The WM_PSD_ENVSTAMPRECT message is sent to the owner of a page setup dialog box when the user selects the Envelope button.
    CBEM_GETCOMBOCONTROL = 0x0406  # The CBEM_GETCOMBOCONTROL message is sent to the parent window of a combo box to retrieve the handle to the combo box.
    PBM_SETRANGE32 = 0x0406  # The PBM_SETRANGE32 message is sent to the owner of a progress bar control to set the range of the progress bar to a minimum and maximum value.
    RB_SETBANDINFOA = 0x0406  # The RB_SETBANDINFOA message is sent to a band object to set the band object's attributes.
    SB_GETPARTS = 0x0406  # The SB_GETPARTS message is sent to a scroll bar to retrieve the number of pieces into which it is divided.
    TB_MARKBUTTON = 0x0406  # The TB_MARKBUTTON message is sent to a toolbar to mark a toolbar button as either pressed or not pressed.
    TBM_SETRANGE = 0x0406  # The TBM_SETRANGE message is sent to the owner of a toolbar to set the minimum and maximum values of the slider.
    TTM_NEWTOOLRECTA = 0x0406  # The TTM_NEWTOOLRECTA message is sent to a tooltip control to create a new tool with the specified rectangle.
    WM_PSD_YAFULLPAGERECT = 0x0406  # The WM_PSD_YAFULLPAGERECT message is sent to the owner of a page setup dialog box when the user selects the Paper Size button.
    CBEM_GETEDITCONTROL = 0x0407  # The CBEM_GETEDITCONTROL message is sent to the parent window of a combo box to retrieve the handle to the edit control in the combo box.
    PBM_GETRANGE = 0x0407  # The PBM_GETRANGE message is sent to the owner of a progress bar control to retrieve the range of the progress bar.
    RB_SETPARENT = 0x0407  # The RB_SETPARENT message is sent to a band object to set the parent of the band object.
    SB_GETBORDERS = 0x0407  # The SB_GETBORDERS message is sent to a scroll bar to retrieve the sizes of the borders of the scroll bar's container window.
    TBM_SETRANGEMIN = 0x0407  # The TBM_SETRANGEMIN message is sent to the owner of a toolbar to set the minimum value of the slider.
    TTM_RELAYEVENT = 0x0407  # The TTM_RELAYEVENT message is sent to the parent window of a tooltip control when the user clicks the left mouse button while the mouse is over a tooltip.
    CBEM_SETEXSTYLE = 0x0408  # The CBEM_SETEXSTYLE message is sent to the parent window of a combo box to set the extended style of the combo box.
    PBM_GETPOS = 0x0408  # The PBM_GETPOS message is sent to the owner of a progress bar control to retrieve the current position of the progress bar.
    RB_HITTEST = 0x0408  # The RB_HITTEST message is sent to a band object to determine which band in a rebar control the mouse pointer is over.
    SB_SETMINHEIGHT = 0x0408  # The SB_SETMINHEIGHT message is sent to a scroll bar to set the minimum height of the scroll bar's container window.
    TBM_SETRANGEMAX = 0x0408  # The TBM_SETRANGEMAX message is sent to the owner of a toolbar to set the maximum value of the slider.
    TTM_GETTOOLINFOA = 0x0408  # The TTM_GETTOOLINFOA message is sent to a tooltip control to retrieve the information about a tool.
    CBEM_GETEXSTYLE = 0x0409  # The CBEM_GETEXSTYLE message is sent to the parent window of a combo box to retrieve the extended style of the combo box.
    CBEM_GETEXTENDEDSTYLE = 0x0409  # The CBEM_GETEXTENDEDSTYLE message is sent to the parent window of a combo box to retrieve the extended style of the combo box.
    PBM_SETBARCOLOR = 0x0409  # The PBM_SETBARCOLOR message is sent to the owner of a progress bar control to set the color of the progress bar.
    RB_GETRECT = 0x0409  # The RB_GETRECT message is sent to a band object to retrieve the coordinates of the band object.
    SB_SIMPLE = 0x0409  # The SB_SIMPLE message is sent to a scroll bar to set it to a simple scroll bar.
    TB_ISBUTTONENABLED = 0x0409  # The TB_ISBUTTONENABLED message is sent to a toolbar to determine whether a toolbar button is enabled.
    TBM_CLEARTICS = 0x0409  # The TBM_CLEARTICS message is sent to the owner of a toolbar to clear the tick marks.
    TTM_SETTOOLINFOA = 0x0409  # The TTM_SETTOOLINFOA message is sent to a tooltip control to set the information about a tool.
    CBEM_HASEDITCHANGED = 0x040a  # The CBEM_HASEDITCHANGED message is sent to the parent window of a combo box to indicate that the edit control has been changed.
    RB_INSERTBANDW = 0x040a  # The RB_INSERTBANDW message is sent to a band object to insert a band into a rebar control.
    SB_GETRECT = 0x040a  # The SB_GETRECT message is sent to a scroll bar to retrieve the coordinates of the scroll bar's container window.
    TB_ISBUTTONCHECKED = 0x040a  # The TB_ISBUTTONCHECKED message is sent to a toolbar to determine whether a toolbar button is checked.
    TBM_SETSEL = 0x040a  # The TBM_SETSEL message is sent to the owner of a toolbar to set the selection mark.
    TTM_HITTESTA = 0x040a  # The TTM_HITTESTA message is sent to a tooltip control to determine whether the mouse pointer is over a tooltip.
    WIZ_QUERYNUMPAGES = 0x040a  # The WIZ_QUERYNUMPAGES message is sent to the wizard to determine the number of pages in the wizard.
    CBEM_INSERTITEMW = 0x040b  # The CBEM_INSERTITEMW message is sent to the parent window of a combo box to insert a new item in the combo box.
    RB_SETBANDINFOW = 0x040b  # The RB_SETBANDINFOW message is sent to a band object to set the band object's attributes.
    SB_SETTEXTW = 0x040b  # The SB_SETTEXTW message is sent to a scroll bar to set the text of the scroll bar's container window.
    TB_ISBUTTONPRESSED = 0x040b  # The TB_ISBUTTONPRESSED message is sent to a toolbar to determine whether a toolbar button is pressed.
    TBM_SETSELSTART = 0x040b  # The TBM_SETSELSTART message is sent to the owner of a toolbar to set the starting position of the selection mark.
    TTM_GETTEXTA = 0x040b  # The TTM_GETTEXTA message is sent to a tooltip control to retrieve the text of the tooltip.
    WIZ_NEXT = 0x040b  # The WIZ_NEXT message is sent to the wizard to advance to the next page.
    CBEM_SETITEMW = 0x040c  # The CBEM_SETITEMW message is sent to the parent window of a combo box to set the attributes of an item in the combo box.
    RB_GETBANDCOUNT = 0x040c  # The RB_GETBANDCOUNT message is sent to a rebar control to retrieve the number of bands in the rebar control.
    SB_GETTEXTLENGTHW = 0x040c  # The SB_GETTEXTLENGTHW message is sent to a scroll bar to retrieve the length, in characters, of the text of the scroll bar's container window.
    TB_ISBUTTONHIDDEN = 0x040c  # The TB_ISBUTTONHIDDEN message is sent to a toolbar to determine whether a toolbar button is hidden.
    TBM_SETSELEND = 0x040c  # The TBM_SETSELEND message is sent to the owner of a toolbar to set the ending position of the selection mark.
    TTM_UPDATETIPTEXTA = 0x040c  # The TTM_UPDATETIPTEXTA message is sent to a tooltip control to set the text of the tooltip.
    WIZ_PREV = 0x040c  # The WIZ_PREV message is sent to the wizard to go to the previous page.
    CBEM_GETITEMW = 0x040d  # The CBEM_GETITEMW message is sent to the parent window of a combo box to retrieve the attributes of an item in the combo box.
    RB_GETROWCOUNT = 0x040d  # The RB_GETROWCOUNT message is sent to a rebar control to retrieve the number of rows in the rebar control.
    SB_GETTEXTW = 0x040d  # The SB_GETTEXTW message is sent to a scroll bar to retrieve the text of the scroll bar's container window.
    TB_ISBUTTONINDETERMINATE = 0x040d  # The TB_ISBUTTONINDETERMINATE message is sent to a toolbar to determine whether a toolbar button is indeterminate.
    TTM_GETTOOLCOUNT = 0x040d  # The TTM_GETTOOLCOUNT message is sent to a tooltip control to retrieve the number of tooltips in the tooltip control.
    CBEM_SETEXTENDEDSTYLE = 0x040e  # The CBEM_SETEXTENDEDSTYLE message is sent to the parent window of a combo box to set the extended style of the combo box.
    RB_GETROWHEIGHT = 0x040e  # The RB_GETROWHEIGHT message is sent to a rebar control to retrieve the height of a row in the rebar control.
    SB_ISSIMPLE = 0x040e  # The SB_ISSIMPLE message is sent to a scroll bar to determine whether it is a simple scroll bar.
    TB_ISBUTTONHIGHLIGHTED = 0x040e  # The TB_ISBUTTONHIGHLIGHTED message is sent to a toolbar to determine whether a toolbar button is highlighted.
    TBM_GETPTICS = 0x040e  # The TBM_GETPTICS message is sent to the owner of a toolbar to retrieve the tick marks.
    TTM_ENUMTOOLSA = 0x040e  # The TTM_ENUMTOOLSA message is sent to a tooltip control to enumerate the tooltips in the tooltip control.
    SB_SETICON = 0x040f  # The SB_SETICON message is sent to a scroll bar to set the icon for the scroll bar's container window.
    TBM_GETTICPOS = 0x040f  # The TBM_GETTICPOS message is sent to the owner of a toolbar to retrieve the position of a tick mark.
    TTM_GETCURRENTTOOLA = 0x040f  # The TTM_GETCURRENTTOOLA message is sent to a tooltip control to retrieve the handle to the tool that the tooltip control is currently displaying.
    RB_IDTOINDEX = 0x0410  # The RB_IDTOINDEX message is sent to a rebar control to retrieve the index of the band that has the specified ID.
    SB_SETTIPTEXTA = 0x0410  # The SB_SETTIPTEXTA message is sent to a scroll bar to set the text of the scroll bar's container window.
    TBM_GETNUMTICS = 0x0410  # The TBM_GETNUMTICS message is sent to the owner of a toolbar to retrieve the number of tick marks.
    TTM_WINDOWFROMPOINT = 0x0410  # The TTM_WINDOWFROMPOINT message is sent to a tooltip control to retrieve the handle to the tooltip control window.
    RB_GETTOOLTIPS = 0x0411  # The RB_GETTOOLTIPS message is sent to a rebar control to retrieve the handle to the rebar's tooltip control.
    SB_SETTIPTEXTW = 0x0411  # The SB_SETTIPTEXTW message is sent to a scroll bar to set the text of the scroll bar's container window.
    TBM_GETSELSTART = 0x0411  # The TBM_GETSELSTART message is sent to the owner of a toolbar to retrieve the starting position of the selection mark.
    TB_SETSTATE = 0x0411  # The TB_SETSTATE message is sent to a toolbar to change the state of a toolbar button.
    TTM_TRACKACTIVATE = 0x0411  # The TTM_TRACKACTIVATE message is sent to a tooltip control to indicate that the tooltip window is being activated.
    RB_SETTOOLTIPS = 0x0412  # The RB_SETTOOLTIPS message is sent to a rebar control to set the handle to the rebar's tooltip control.
    SB_GETTIPTEXTA = 0x0412  # The SB_GETTIPTEXTA message is sent to a scroll bar to retrieve the text of the scroll bar's container window.
    TB_GETSTATE = 0x0412  # The TB_GETSTATE message is sent to a toolbar to retrieve the state of a toolbar button.
    TBM_GETSELEND = 0x0412  # The TBM_GETSELEND message is sent to the owner of a toolbar to retrieve the ending position of the selection mark.
    TTM_TRACKPOSITION = 0x0412  # The TTM_TRACKPOSITION message is sent to a tooltip control to set the position of the tooltip window.
    RB_SETBKCOLOR = 0x0413  # The RB_SETBKCOLOR message is sent to a rebar control to set the background color of the rebar control.
    SB_GETTIPTEXTW = 0x0413  # The SB_GETTIPTEXTW message is sent to a scroll bar to retrieve the text of the scroll bar's container window.
    TB_ADDBITMAP = 0x0413  # The TB_ADDBITMAP message is sent to a toolbar to add a bitmap to the toolbar.
    TBM_CLEARSEL = 0x0413  # The TBM_CLEARSEL message is sent to the owner of a toolbar to clear the selection mark.
    TTM_SETTIPBKCOLOR = 0x0413  # The TTM_SETTIPBKCOLOR message is sent to a tooltip control to set the background color of the tooltip control.
    RB_GETBKCOLOR = 0x0414  # The RB_GETBKCOLOR message is sent to a rebar control to retrieve the background color of the rebar control.
    SB_GETICON = 0x0414  # The SB_GETICON message is sent to a scroll bar to retrieve the handle to the icon used to represent the scroll bar.
    TB_ADDBUTTONSA = 0x0414  # The TB_ADDBUTTONSA message is sent to a toolbar to add buttons to the toolbar.
    TBM_SETTICFREQ = 0x0414  # The TBM_SETTICFREQ message is sent to the owner of a toolbar to set the frequency of the tick marks.
    TTM_SETTIPTEXTCOLOR = 0x0414  # The TTM_SETTIPTEXTCOLOR message is sent to a tooltip control to set the color of the tooltip text.
    RB_SETTEXTCOLOR = 0x0415  # The RB_SETTEXTCOLOR message is sent to a rebar control to set the text color of the rebar control.
    TB_INSERTBUTTONA = 0x0415  # The TB_INSERTBUTTONA message is sent to a toolbar to insert buttons into the toolbar.
    TBM_SETPAGESIZE = 0x0415  # The TBM_SETPAGESIZE message is sent to the owner of a toolbar to set the size of the page selection mark.
    TTM_GETDELAYTIME = 0x0415  # The TTM_GETDELAYTIME message is sent to a tooltip control to retrieve the delay time for a particular tooltip type.
    RB_GETTEXTCOLOR = 0x0416  # The RB_GETTEXTCOLOR message is sent to a rebar control to retrieve the text color of the rebar control.
    TB_DELETEBUTTON = 0x0416  # The TB_DELETEBUTTON message is sent to a toolbar to delete a button from the toolbar.
    TBM_GETPAGESIZE = 0x0416  # The TBM_GETPAGESIZE message is sent to the owner of a toolbar to retrieve the size of the page selection mark.
    TTM_GETTIPBKCOLOR = 0x0416  # The TTM_GETTIPBKCOLOR message is sent to a tooltip control to retrieve the background color of the tooltip control.
    RB_SIZETORECT = 0x0417  # The RB_SIZETORECT message is sent to a rebar control to retrieve the rectangle of the rebar control.
    TB_GETBUTTON = 0x0417  # The TB_GETBUTTON message is sent to a toolbar to retrieve the handle to a toolbar button.
    TBM_SETLINESIZE = 0x0417  # The TBM_SETLINESIZE message is sent to the owner of a toolbar to set the size of the line selection mark.
    TTM_GETTIPTEXTCOLOR = 0x0417  # The TTM_GETTIPTEXTCOLOR message is sent to a tooltip control to retrieve the color of the tooltip text.
    RB_BEGINDRAG = 0x0418  # The RB_BEGINDRAG message is sent to a rebar control to begin a drag operation.
    TB_BUTTONCOUNT = 0x0418  # The TB_BUTTONCOUNT message is sent to a toolbar to retrieve the number of buttons in the toolbar.
    TBM_GETLINESIZE = 0x0418  # The TBM_GETLINESIZE message is sent to the owner of a toolbar to retrieve the size of the line selection mark.
    TTM_SETMAXTIPWIDTH = 0x0418  # The TTM_SETMAXTIPWIDTH message is sent to a tooltip control to set the maximum width of the tooltip text.
    RB_ENDDRAG = 0x0419  # The RB_ENDDRAG message is sent to a rebar control to end a drag operation.
    TB_COMMANDTOINDEX = 0x0419  # The TB_COMMANDTOINDEX message is sent to a toolbar to retrieve the index of the button in the toolbar that has the specified command ID.
    TBM_GETTHUMBRECT = 0x0419  # The TBM_GETTHUMBRECT message is sent to the owner of a toolbar to retrieve the rectangle of the thumb.
    TTM_GETMAXTIPWIDTH = 0x0419  # The TTM_GETMAXTIPWIDTH message is sent to a tooltip control to retrieve the maximum width of the tooltip text.
    RB_DRAGMOVE = 0x041a  # The RB_DRAGMOVE message is sent to a rebar control to move the band that is being dragged.
    TBM_GETCHANNELRECT = 0x041a  # The TBM_GETCHANNELRECT message is sent to the owner of a toolbar to retrieve the rectangle of the channel.
    TB_SAVERESTOREA = 0x041a  # The TB_SAVERESTOREA message is sent to a toolbar to save the toolbar state to the registry.
    TTM_SETMARGIN = 0x041a  # The TTM_SETMARGIN message is sent to a tooltip control to set the width of the tooltip border.
    RB_GETBARHEIGHT = 0x041b  # The RB_GETBARHEIGHT message is sent to a rebar control to retrieve the height of the rebar control.
    TB_CUSTOMIZE = 0x041b  # The TB_CUSTOMIZE message is sent to a toolbar to allow customization of the toolbar.
    TBM_SETTHUMBLENGTH = 0x041b  # The TBM_SETTHUMBLENGTH message is sent to the owner of a toolbar to set the length of the thumb.
    TTM_GETMARGIN = 0x041b  # The TTM_GETMARGIN message is sent to a tooltip control to retrieve the width of the tooltip border.
    RB_GETBANDINFOW = 0x041c  # The RB_GETBANDINFOW message is sent to a rebar control to retrieve information about a band in the rebar control.
    TB_ADDSTRINGA = 0x041c  # The TB_ADDSTRINGA message is sent to a toolbar to add a string to the toolbar.
    TBM_GETTHUMBLENGTH = 0x041c  # The TBM_GETTHUMBLENGTH message is sent to the owner of a toolbar to retrieve the length of the thumb.
    TTM_POP = 0x041c  # The TTM_POP message is sent to a tooltip control to remove the tooltip from the screen.
    RB_GETBANDINFOA = 0x041d  # The RB_GETBANDINFOA message is sent to a rebar control to retrieve information about a band in the rebar control.
    TB_GETITEMRECT = 0x041d  # The TB_GETITEMRECT message is sent to a toolbar to retrieve the bounding rectangle of a toolbar button.
    TBM_SETTOOLTIPS = 0x041d  # The TBM_SETTOOLTIPS message is sent to the owner of a toolbar to set the tooltip text for the toolbar.
    TTM_UPDATE = 0x041d  # The TTM_UPDATE message is sent to a tooltip control to update the tooltip text.
    RB_MINIMIZEBAND = 0x041e  # The RB_MINIMIZEBAND message is sent to a rebar control to minimize a band in the rebar control.
    TB_BUTTONSTRUCTSIZE = 0x041e  # The TB_BUTTONSTRUCTSIZE message is sent to a toolbar to set the size of the structure used to represent toolbar buttons.
    TBM_GETTOOLTIPS = 0x041e  # The TBM_GETTOOLTIPS message is sent to the owner of a toolbar to retrieve the tooltip text for the toolbar.
    TTM_GETBUBBLESIZE = 0x041e  # The TTM_GETBUBBLESIZE message is sent to a tooltip control to retrieve the size of the tooltip bubble.
    RB_MAXIMIZEBAND = 0x041f  # The RB_MAXIMIZEBAND message is sent to a rebar control to maximize a band in the rebar control.
    TBM_SETTIPSIDE = 0x041f  # The TBM_SETTIPSIDE message is sent to the owner of a toolbar to set the side of the tooltip text for the toolbar.
    TB_SETBUTTONSIZE = 0x041f  # The TB_SETBUTTONSIZE message is sent to a toolbar to set the size of the toolbar buttons.
    TTM_ADJUSTRECT = 0x041f  # The TTM_ADJUSTRECT message is sent to a tooltip control to determine the size and location of the tooltip rectangle.
    TBM_SETBUDDY = 0x0420  # The TBM_SETBUDDY message is sent to the owner of a toolbar to set the buddy window for the toolbar.
    TB_SETBITMAPSIZE = 0x0420  # The TB_SETBITMAPSIZE message is sent to a toolbar to set the size of the bitmap used to represent toolbar buttons.
    TTM_SETTITLEA = 0x0420  # The TTM_SETTITLEA message is sent to a tooltip control to set the title of the tooltip control.
    MSG_FTS_JUMP_VA = 0x0421  # The MSG_FTS_JUMP_VA message is sent to the application when the user clicks a link in a search-enabled help file.
    TB_AUTOSIZE = 0x0421  # The TB_AUTOSIZE message is sent to a toolbar to determine the best size to use for the toolbar buttons.
    TBM_GETBUDDY = 0x0421  # The TBM_GETBUDDY message is sent to the owner of a toolbar to retrieve the buddy window for the toolbar.
    TTM_SETTITLEW = 0x0421  # The TTM_SETTITLEW message is sent to a tooltip control to set the title of the tooltip control.
    RB_GETBANDBORDERS = 0x0422  # The RB_GETBANDBORDERS message is sent to a rebar control to retrieve the border sizes of the bands in the rebar control.
    MSG_FTS_JUMP_QWORD = 0x0423  # The MSG_FTS_JUMP_QWORD message is sent to the application when the user clicks a link in a search-enabled help file.
    RB_SHOWBAND = 0x0423  # The RB_SHOWBAND message is sent to a rebar control to show or hide a band in the rebar control.
    TB_GETTOOLTIPS = 0x0423  # The TB_GETTOOLTIPS message is sent to a toolbar to retrieve the tooltip text for the toolbar.
    MSG_REINDEX_REQUEST = 0x0424  # The MSG_REINDEX_REQUEST message is sent to the application when the user clicks a link in a search-enabled help file.
    TB_SETTOOLTIPS = 0x0424  # The TB_SETTOOLTIPS message is sent to a toolbar to set the tooltip text for the toolbar.
    MSG_FTS_WHERE_IS_IT = 0x0425  # The MSG_FTS_WHERE_IS_IT message is sent to the application when the user clicks a link in a search-enabled help file.
    RB_SETPALETTE = 0x0425  # The RB_SETPALETTE message is sent to a rebar control to set the colors used for painting the rebar control.
    TB_SETPARENT = 0x0425  # The TB_SETPARENT message is sent to a toolbar to set the parent window of the toolbar.
    RB_GETPALETTE = 0x0426  # The RB_GETPALETTE message is sent to a rebar control to retrieve the colors used for painting the rebar control.
    RB_MOVEBAND = 0x0427  # The RB_MOVEBAND message is sent to a rebar control to move a band in the rebar control.
    TB_SETROWS = 0x0427  # The TB_SETROWS message is sent to a toolbar to set the number of rows of toolbar buttons.
    TB_GETROWS = 0x0428  # The TB_GETROWS message is sent to a toolbar to retrieve the number of rows of toolbar buttons.
    TB_GETBITMAPFLAGS = 0x0429  # The TB_GETBITMAPFLAGS message is sent to a toolbar to retrieve the flags that specify how the toolbar buttons are displayed.
    TB_SETCMDID = 0x042a  # The TB_SETCMDID message is sent to a toolbar to set the command identifier for a toolbar button.
    RB_PUSHCHEVRON = 0x042b  # The RB_PUSHCHEVRON message is sent to a rebar control to display a drop-down menu of a band in the rebar control.
    TB_CHANGEBITMAP = 0x042b  # The TB_CHANGEBITMAP message is sent to a toolbar to change the bitmap used for a toolbar button.
    TB_GETBITMAP = 0x042c  # The TB_GETBITMAP message is sent to a toolbar to retrieve the bitmap used for a toolbar button.
    MSG_GET_DEFFONT = 0x042d  # The MSG_GET_DEFFONT message is sent to the application to retrieve the default font for the application.
    TB_GETBUTTONTEXTA = 0x042d  # The TB_GETBUTTONTEXTA message is sent to a toolbar to retrieve the text of a toolbar button.
    TB_REPLACEBITMAP = 0x042e  # The TB_REPLACEBITMAP message is sent to a toolbar to replace the bitmap used for a toolbar button.
    TB_SETINDENT = 0x042f  # The TB_SETINDENT message is sent to a toolbar to set the width of the gap between toolbar buttons.
    TB_SETIMAGELIST = 0x0430  # The TB_SETIMAGELIST message is sent to a toolbar to set the image list for the toolbar.
    TB_GETIMAGELIST = 0x0431  # The TB_GETIMAGELIST message is sent to a toolbar to retrieve the image list for the toolbar.
    TB_LOADIMAGES = 0x0432  # The TB_LOADIMAGES message is sent to a toolbar to load the images for the toolbar buttons.
    EM_CANPASTE = 0x0432  # The EM_CANPASTE message is sent to an edit control to determine whether the edit control can paste the contents of the clipboard.
    TTM_ADDTOOLW = 0x0432  # The TTM_ADDTOOLW message is sent to a tooltip control to add a new tooltip to the tooltip control.
    EM_DISPLAYBAND = 0x0433  # The EM_DISPLAYBAND message is sent to an edit control to display the band.
    TB_GETRECT = 0x0433  # The TB_GETRECT message is sent to a toolbar to retrieve the bounding rectangle of a toolbar button.
    TTM_DELTOOLW = 0x0433  # The TTM_DELTOOLW message is sent to a tooltip control to delete a tooltip from the tooltip control.
    EM_EXGETSEL = 0x0434  # The EM_EXGETSEL message is sent to an edit control to retrieve the current selection.
    TB_SETHOTIMAGELIST = 0x0434  # The TB_SETHOTIMAGELIST message is sent to a toolbar to set the hot image list for the toolbar.
    TTM_NEWTOOLRECTW = 0x0434  # The TTM_NEWTOOLRECTW message is sent to a tooltip control to create a new tooltip.
    EM_EXLIMITTEXT = 0x0435  # The EM_EXLIMITTEXT message is sent to an edit control to limit the text that can be entered into the edit control.
    TB_GETHOTIMAGELIST = 0x0435  # The TB_GETHOTIMAGELIST message is sent to a toolbar to retrieve the hot image list for the toolbar.
    TTM_GETTOOLINFOW = 0x0435  # The TTM_GETTOOLINFOW message is sent to a tooltip control to retrieve information about a tooltip.
    EM_EXLINEFROMCHAR = 0x0436  # The EM_EXLINEFROMCHAR message is sent to an edit control to determine the line number from the character position.
    TB_SETDISABLEDIMAGELIST = 0x0436  # The TB_SETDISABLEDIMAGELIST message is sent to a toolbar to set the disabled image list for the toolbar.
    TTM_SETTOOLINFOW = 0x0436  # The TTM_SETTOOLINFOW message is sent to a tooltip control to set information about a tooltip.
    EM_EXSETSEL = 0x0437  # The EM_EXSETSEL message is sent to an edit control to set the current selection.
    TB_GETDISABLEDIMAGELIST = 0x0437  # The TB_GETDISABLEDIMAGELIST message is sent to a toolbar to retrieve the disabled image list for the toolbar.
    TTM_HITTESTW = 0x0437  # The TTM_HITTESTW message is sent to a tooltip control to determine which tooltip control contains the specified point.
    EM_FINDTEXT = 0x0438  # The EM_FINDTEXT message is sent to an edit control to search for a specified string.
    TB_SETSTYLE = 0x0438  # The TB_SETSTYLE message is sent to a toolbar to set the style of the toolbar.
    TTM_GETTEXTW = 0x0438  # The TTM_GETTEXTW message is sent to a tooltip control to retrieve the text of a tooltip.
    EM_FORMATRANGE = 0x0439  # The EM_FORMATRANGE message is sent to an edit control to format a range of text in the edit control.
    TB_GETSTYLE = 0x0439  # The TB_GETSTYLE message is sent to a toolbar to retrieve the style of the toolbar.
    TTM_UPDATETIPTEXTW = 0x0439  # The TTM_UPDATETIPTEXTW message is sent to a tooltip control to update the text of a tooltip.
    EM_GETCHARFORMAT = 0x043a  # The EM_GETCHARFORMAT message is sent to an edit control to retrieve the character format for a range of text.
    TB_GETBUTTONSIZE = 0x043a  # The TB_GETBUTTONSIZE message is sent to a toolbar to retrieve the size of the toolbar button.
    TTM_ENUMTOOLSW = 0x043a  # The TTM_ENUMTOOLSW message is sent to a tooltip control to enumerate the tooltips in the tooltip control.
    EM_GETEVENTMASK = 0x043b  # The EM_GETEVENTMASK message is sent to an edit control to retrieve the event mask for the edit control.
    TB_SETBUTTONWIDTH = 0x043b  # The TB_SETBUTTONWIDTH message is sent to a toolbar to set the width of the toolbar button.
    TTM_GETCURRENTTOOLW = 0x043b  # The TTM_GETCURRENTTOOLW message is sent to a tooltip control to retrieve the handle to the tooltip control that is currently displayed.
    EM_GETOLEINTERFACE = 0x043c  # The EM_GETOLEINTERFACE message is sent to an edit control to retrieve the OLE interface to the edit control.
    TB_SETMAXTEXTROWS = 0x043c  # The TB_SETMAXTEXTROWS message is sent to a toolbar to set the maximum number of text rows that can be displayed in the toolbar.
    EM_GETPARAFORMAT = 0x043d  # The EM_GETPARAFORMAT message is sent to an edit control to retrieve the paragraph format for a range of text.
    TB_GETTEXTROWS = 0x043d  # The TB_GETTEXTROWS message is sent to a toolbar to retrieve the number of text rows that can be displayed in the toolbar.
    EM_GETSELTEXT = 0x043e  # The EM_GETSELTEXT message is sent to an edit control to retrieve the text that is selected.
    TB_GETOBJECT = 0x043e  # The TB_GETOBJECT message is sent to a toolbar to retrieve the handle to the object associated with a toolbar button.
    EM_HIDESELECTION = 0x043f  # The EM_HIDESELECTION message is sent to an edit control to hide the current selection.
    TB_GETBUTTONINFOW = 0x043f  # The TB_GETBUTTONINFOW message is sent to a toolbar to retrieve information about a toolbar button.
    EM_PASTESPECIAL = 0x0440  # The EM_PASTESPECIAL message is sent to an edit control to paste a specified type of data.
    TB_SETBUTTONINFOW = 0x0440  # The TB_SETBUTTONINFOW message is sent to a toolbar to set information about a toolbar button.
    EM_REQUESTRESIZE = 0x0441  # The EM_REQUESTRESIZE message is sent to an edit control to request that the edit control be resized.
    TB_GETBUTTONINFOA = 0x0441  # The TB_GETBUTTONINFOA message is sent to a toolbar to retrieve information about a toolbar button.
    EM_SELECTIONTYPE = 0x0442  # The EM_SELECTIONTYPE message is sent to an edit control to retrieve the type of the current selection.
    TB_SETBUTTONINFOA = 0x0442  # The TB_SETBUTTONINFOA message is sent to a toolbar to set information about a toolbar button.
    EM_SETBKGNDCOLOR = 0x0443  # The EM_SETBKGNDCOLOR message is sent to an edit control to set the background color of the edit control.
    TB_INSERTBUTTONW = 0x0443  # The TB_INSERTBUTTONW message is sent to a toolbar to insert a button into the toolbar.
    EM_SETCHARFORMAT = 0x0444  # The EM_SETCHARFORMAT message is sent to an edit control to set the character format of the current selection in the edit control.
    TB_ADDBUTTONSW = 0x0444  # The TB_ADDBUTTONSW message is sent to a toolbar to add buttons to the toolbar.
    EM_SETEVENTMASK = 0x0445  # The EM_SETEVENTMASK message is sent to an edit control to specify the events that the edit control will send to the parent window.
    TB_HITTEST = 0x0445  # The TB_HITTEST message is sent to a toolbar to determine which toolbar button was clicked.
    EM_SETOLECALLBACK = 0x0446  # The EM_SETOLECALLBACK message is sent to an edit control to set the OLE callback function.
    TB_SETDRAWTEXTFLAGS = 0x0446  # The TB_SETDRAWTEXTFLAGS message is sent to a toolbar to set the drawing flags for the toolbar.
    EM_SETPARAFORMAT = 0x0447  # The EM_SETPARAFORMAT message is sent to an edit control to set the paragraph format of the current selection in the edit control.
    TB_GETHOTITEM = 0x0447  # The TB_GETHOTITEM message is sent to a toolbar to retrieve the index of the toolbar button that has the keyboard focus.
    EM_SETTARGETDEVICE = 0x0448  # The EM_SETTARGETDEVICE message is sent to an edit control to specify the target device for the output from the edit control.
    TB_SETHOTITEM = 0x0448  # The TB_SETHOTITEM message is sent to a toolbar to set the index of the toolbar button that has the keyboard focus.
    EM_STREAMIN = 0x0449  # The EM_STREAMIN message is sent to an edit control to import text from a stream.
    TB_SETANCHORHIGHLIGHT = 0x0449  # The TB_SETANCHORHIGHLIGHT message is sent to a toolbar to set the highlight state of the anchor button.
    EM_STREAMOUT = 0x044a  # The EM_STREAMOUT message is sent to an edit control to export text to a stream.
    TB_GETANCHORHIGHLIGHT = 0x044a  # The TB_GETANCHORHIGHLIGHT message is sent to a toolbar to retrieve the highlight state of the anchor button.
    EM_GETTEXTRANGE = 0x044b  # The EM_GETTEXTRANGE message is sent to an edit control to retrieve the text of a specified range.
    TB_GETBUTTONTEXTW = 0x044b  # The TB_GETBUTTONTEXTW message is sent to a toolbar to retrieve the text of a toolbar button.
    EM_FINDWORDBREAK = 0x044c  # The EM_FINDWORDBREAK message is sent to an edit control to determine the location of a word break.
    TB_SAVERESTOREW = 0x044c  # The TB_SAVERESTOREW message is sent to a toolbar to save the toolbar state to a file.
    EM_SETOPTIONS = 0x044d  # The EM_SETOPTIONS message is sent to an edit control to specify the options for the edit control.
    TB_ADDSTRINGW = 0x044d  # The TB_ADDSTRINGW message is sent to a toolbar to add a string to the toolbar.
    EM_GETOPTIONS = 0x044e  # The EM_GETOPTIONS message is sent to an edit control to retrieve the options for the edit control.
    TB_MAPACCELERATORA = 0x044e  # The TB_MAPACCELERATORA message is sent to a toolbar to map an accelerator to a toolbar button.
    EM_FINDTEXTEX = 0x044f  # The EM_FINDTEXTEX message is sent to an edit control to search for a specified string.
    TB_GETINSERTMARK = 0x044f  # The TB_GETINSERTMARK message is sent to a toolbar to retrieve the insertion mark.
    EM_GETWORDBREAKPROCEX = 0x0450  # The EM_GETWORDBREAKPROCEX message is sent to an edit control to retrieve the word break procedure.
    TB_SETINSERTMARK = 0x0450  # The TB_SETINSERTMARK message is sent to a toolbar to set the insertion mark.
    EM_SETWORDBREAKPROCEX = 0x0451  # The EM_SETWORDBREAKPROCEX message is sent to an edit control to set the word break procedure.
    TB_INSERTMARKHITTEST = 0x0451  # The TB_INSERTMARKHITTEST message is sent to a toolbar to determine whether the insertion mark is over a toolbar button.
    EM_SETUNDOLIMIT = 0x0452  # The EM_SETUNDOLIMIT message is sent to an edit control to set the maximum number of undo actions that can be stored in the undo buffer.
    TB_MOVEBUTTON = 0x0452  # The TB_MOVEBUTTON message is sent to a toolbar to move a button to a new position.
    TB_GETMAXSIZE = 0x0453  # The TB_GETMAXSIZE message is sent to a toolbar to retrieve the maximum size of a toolbar button.
    EM_REDO = 0x0454  # The EM_REDO message is sent to an edit control to redo the last undone action.
    TB_SETEXTENDEDSTYLE = 0x0454  # The TB_SETEXTENDEDSTYLE message is sent to a toolbar to set the extended style of the toolbar.
    EM_CANREDO = 0x0455  # The EM_CANREDO message is sent to an edit control to determine whether the last undone action can be redone.
    TB_GETEXTENDEDSTYLE = 0x0455  # The TB_GETEXTENDEDSTYLE message is sent to a toolbar to retrieve the extended style of the toolbar.
    EM_GETUNDONAME = 0x0456  # The EM_GETUNDONAME message is sent to an edit control to retrieve the name of the undo action.
    TB_GETPADDING = 0x0456  # The TB_GETPADDING message is sent to a toolbar to retrieve the padding of the toolbar buttons.
    EM_GETREDONAME = 0x0457  # The EM_GETREDONAME message is sent to an edit control to retrieve the name of the redo action.
    TB_SETPADDING = 0x0457  # The TB_SETPADDING message is sent to a toolbar to set the padding of the toolbar buttons.
    EM_STOPGROUPTYPING = 0x0458  # The EM_STOPGROUPTYPING message is sent to an edit control to stop typing in a group of related edit controls.
    TB_SETINSERTMARKCOLOR = 0x0458  # The TB_SETINSERTMARKCOLOR message is sent to a toolbar to set the color of the insertion mark.
    EM_SETTEXTMODE = 0x0459  # The EM_SETTEXTMODE message is sent to an edit control to set the text mode of the edit control.
    TB_GETINSERTMARKCOLOR = 0x0459  # The TB_GETINSERTMARKCOLOR message is sent to a toolbar to retrieve the color of the insertion mark.
    EM_GETTEXTMODE = 0x045a  # The EM_GETTEXTMODE message is sent to an edit control to retrieve the text mode of the edit control.
    TB_MAPACCELERATORW = 0x045a  # The TB_MAPACCELERATORW message is sent to a toolbar to map an accelerator to a toolbar button.
    EM_AUTOURLDETECT = 0x045b  # The EM_AUTOURLDETECT message is sent to an edit control to enable or disable automatic URL detection.
    TB_GETSTRINGW = 0x045b  # The TB_GETSTRINGW message is sent to a toolbar to retrieve the text of a toolbar button.
    EM_GETAUTOURLDETECT = 0x045c  # The EM_GETAUTOURLDETECT message is sent to an edit control to determine whether automatic URL detection is enabled.
    TB_GETSTRINGA = 0x045c  # The TB_GETSTRINGA message is sent to a toolbar to retrieve the text of a toolbar button.
    EM_SETPALETTE = 0x045d  # The EM_SETPALETTE message is sent to an edit control to set the palette of the edit control.
    EM_GETTEXTEX = 0x045e  # The EM_GETTEXTEX message is sent to an edit control to retrieve the text of the edit control.
    EM_GETTEXTLENGTHEX = 0x045f  # The EM_GETTEXTLENGTHEX message is sent to an edit control to retrieve the length of the text in the edit control.
    EM_SHOWSCROLLBAR = 0x0460  # The EM_SHOWSCROLLBAR message is sent to an edit control to show or hide the scroll bar.
    EM_SETTEXTEX = 0x0461  # The EM_SETTEXTEX message is sent to an edit control to set the text of the edit control.
    TAPI_REPLY = 0x0463  # The TAPI_REPLY message is sent to the application to indicate that a reply has been received from a call.
    ACM_OPENA = 0x0464  # The ACM_OPENA message is sent to an audio compressor to open the audio compressor.
    BFFM_SETSTATUSTEXTA = 0x0464  # The BFFM_SETSTATUSTEXTA message is sent to a common dialog box to set the status text.
    CDM_FIRST = 0x0464  # The CDM_FIRST message is sent to the first control of a common dialog box.
    CDM_GETSPEC = 0x0464  # The CDM_GETSPEC message is sent to the first control of a common dialog box to retrieve the special information.
    EM_SETPUNCTUATION = 0x0464  # The EM_SETPUNCTUATION message is sent to an edit control to set the punctuation character.
    IPM_CLEARADDRESS = 0x0464  # The IPM_CLEARADDRESS message is sent to an IP address control to clear the address.
    WM_CAP_UNICODE_START = 0x0464  # The WM_CAP_UNICODE_START message is sent to the first control of a common dialog box to indicate that the dialog box is in Unicode mode.
    ACM_PLAY = 0x0465  # The ACM_PLAY message is sent to an audio compressor to play the audio compressor.
    BFFM_ENABLEOK = 0x0465  # The BFFM_ENABLEOK message is sent to a common dialog box to enable the OK button.
    CDM_GETFILEPATH = 0x0465  # The CDM_GETFILEPATH message is sent to the first control of a common dialog box to retrieve the file path.
    EM_GETPUNCTUATION = 0x0465  # The EM_GETPUNCTUATION message is sent to an edit control to retrieve the punctuation character.
    IPM_SETADDRESS = 0x0465  # The IPM_SETADDRESS message is sent to an IP address control to set the address.
    PSM_SETCURSEL = 0x0465  # The PSM_SETCURSEL message is sent to a property sheet to set the current selection.
    UDM_SETRANGE = 0x0465  # The UDM_SETRANGE message is sent to a spin control to set the range of the spin control.
    WM_CHOOSEFONT_SETLOGFONT = 0x0465  # The WM_CHOOSEFONT_SETLOGFONT message is sent to a common dialog box to set the font characteristics of the font selected by the user.
    ACM_STOP = 0x0466  # The ACM_STOP message is sent to an audio compressor to stop the audio compressor.
    BFFM_SETSELECTIONA = 0x0466  # The BFFM_SETSELECTIONA message is sent to a common dialog box to set the selection.
    CDM_GETFOLDERPATH = 0x0466  # The CDM_GETFOLDERPATH message is sent to the first control of a common dialog box to retrieve the folder path.
    EM_SETWORDWRAPMODE = 0x0466  # The EM_SETWORDWRAPMODE message is sent to an edit control to set the word wrap mode.
    IPM_GETADDRESS = 0x0466  # The IPM_GETADDRESS message is sent to an IP address control to retrieve the address.
    PSM_REMOVEPAGE = 0x0466  # The PSM_REMOVEPAGE message is sent to a property sheet to remove a page.
    UDM_GETRANGE = 0x0466  # The UDM_GETRANGE message is sent to a spin control to retrieve the range of the spin control.
    WM_CAP_SET_CALLBACK_ERRORW = 0x0466  # The WM_CAP_SET_CALLBACK_ERRORW message is sent to the application to set the error callback function.
    WM_CHOOSEFONT_SETFLAGS = 0x0466  # The WM_CHOOSEFONT_SETFLAGS message is sent to a common dialog box to set the flags.
    ACM_OPENW = 0x0467  # The ACM_OPENW message is sent to an audio compressor to open the audio compressor.
    BFFM_SETSELECTIONW = 0x0467  # The BFFM_SETSELECTIONW message is sent to a common dialog box to set the selection.
    CDM_GETFOLDERIDLIST = 0x0467  # The CDM_GETFOLDERIDLIST message is sent to the first control of a common dialog box to retrieve the folder ID list.
    EM_GETWORDWRAPMODE = 0x0467  # The EM_GETWORDWRAPMODE message is sent to an edit control to retrieve the word wrap mode.
    IPM_SETRANGE = 0x0467  # The IPM_SETRANGE message is sent to an IP address control to set the range.
    PSM_ADDPAGE = 0x0467  # The PSM_ADDPAGE message is sent to a property sheet to add a page.
    UDM_SETPOS = 0x0467  # The UDM_SETPOS message is sent to a spin control to set the position of the spin control.
    WM_CAP_SET_CALLBACK_STATUSW = 0x0467  # The WM_CAP_SET_CALLBACK_STATUSW message is sent to the application to set the status callback function.
    BFFM_SETSTATUSTEXTW = 0x0468  # The BFFM_SETSTATUSTEXTW message is sent to a common dialog box to set the status text.
    CDM_SETCONTROLTEXT = 0x0468  # The CDM_SETCONTROLTEXT message is sent to the first control of a common dialog box to set the text of the control.
    EM_SETIMECOLOR = 0x0468  # The EM_SETIMECOLOR message is sent to an edit control to set the IME foreground color.
    IPM_SETFOCUS = 0x0468  # The IPM_SETFOCUS message is sent to an IP address control to set the focus.
    PSM_CHANGED = 0x0468  # The PSM_CHANGED message is sent to a property sheet to indicate that the current page has changed.
    UDM_GETPOS = 0x0468  # The UDM_GETPOS message is sent to a spin control to retrieve the position of the spin control.
    CDM_HIDECONTROL = 0x0469  # The CDM_HIDECONTROL message is sent to the first control of a common dialog box to hide the control.
    EM_GETIMECOLOR = 0x0469  # The EM_GETIMECOLOR message is sent to an edit control to retrieve the IME foreground color.
    IPM_ISBLANK = 0x0469  # The IPM_ISBLANK message is sent to an IP address control to determine whether the address is blank.
    PSM_RESTARTWINDOWS = 0x0469  # The PSM_RESTARTWINDOWS message is sent to the property sheet to indicate that the application is restarting.
    UDM_SETBUDDY = 0x0469  # The UDM_SETBUDDY message is sent to a spin control to set the buddy control.
    CDM_SETDEFEXT = 0x046a  # The CDM_SETDEFEXT message is sent to the first control of a common dialog box to set the default extension.
    EM_SETIMEOPTIONS = 0x046a  # The EM_SETIMEOPTIONS message is sent to an edit control to set the IME options.
    PSM_REBOOTSYSTEM = 0x046a  # The PSM_REBOOTSYSTEM message is sent to the property sheet to indicate that the system is restarting.
    UDM_GETBUDDY = 0x046a  # The UDM_GETBUDDY message is sent to a spin control to retrieve the buddy control.
    EM_GETIMEOPTIONS = 0x046b  # The EM_GETIMEOPTIONS message is sent to an edit control to retrieve the IME options.
    PSM_CANCELTOCLOSE = 0x046b  # The PSM_CANCELTOCLOSE message is sent to the property sheet to indicate that the user has canceled the dialog box.
    UDM_SETACCEL = 0x046b  # The UDM_SETACCEL message is sent to a spin control to set the acceleration.
    EM_CONVPOSITION = 0x046c  # The EM_CONVPOSITION message is sent to an edit control to convert the position of the caret.
    PSM_QUERYSIBLINGS = 0x046c  # The PSM_QUERYSIBLINGS message is sent to the property sheet to determine whether the property sheet is being closed.
    UDM_GETACCEL = 0x046c  # The UDM_GETACCEL message is sent to a spin control to retrieve the acceleration.
    MCIWNDM_GETZOOM = 0x046d  # The MCIWNDM_GETZOOM message is sent to an MCI window to retrieve the zoom factor.
    PSM_UNCHANGED = 0x046d  # The PSM_UNCHANGED message is sent to the property sheet to indicate that the current page has not changed.
    UDM_SETBASE = 0x046d  # The UDM_SETBASE message is sent to a spin control to set the base value.
    PSM_APPLY = 0x046e  # The PSM_APPLY message is sent to the property sheet to apply the current page.
    UDM_GETBASE = 0x046e  # The UDM_GETBASE message is sent to a spin control to retrieve the base value.
    PSM_SETTITLEA = 0x046f  # The PSM_SETTITLEA message is sent to the property sheet to set the title of the property sheet.
    UDM_SETRANGE32 = 0x046f  # The UDM_SETRANGE32 message is sent to a spin control to set the range of the spin control.
    PSM_SETWIZBUTTONS = 0x0470  # The PSM_SETWIZBUTTONS message is sent to the property sheet to set the state of the wizard buttons.
    UDM_GETRANGE32 = 0x0470  # The UDM_GETRANGE32 message is sent to a spin control to retrieve the range of the spin control.
    WM_CAP_DRIVER_GET_NAMEW = 0x0470  # The WM_CAP_DRIVER_GET_NAMEW message is sent to the application to retrieve the name of the video capture driver.
    PSM_PRESSBUTTON = 0x0471  # The PSM_PRESSBUTTON message is sent to the property sheet to indicate that a button has been pressed.
    UDM_SETPOS32 = 0x0471  # The UDM_SETPOS32 message is sent to a spin control to set the position of the spin control.
    WM_CAP_DRIVER_GET_VERSIONW = 0x0471  # The WM_CAP_DRIVER_GET_VERSIONW message is sent to the application to retrieve the version number of the video capture driver.
    PSM_SETCURSELID = 0x0472  # The PSM_SETCURSELID message is sent to the property sheet to set the current page.
    UDM_GETPOS32 = 0x0472  # The UDM_GETPOS32 message is sent to a spin control to retrieve the position of the spin control.
    PSM_SETFINISHTEXTA = 0x0473  # The PSM_SETFINISHTEXTA message is sent to the property sheet to set the text of the finish button.
    PSM_GETTABCONTROL = 0x0474  # The PSM_GETTABCONTROL message is sent to the property sheet to retrieve the handle to the tab control.
    PSM_ISDIALOGMESSAGE = 0x0475  # The PSM_ISDIALOGMESSAGE message is sent to the property sheet to determine whether a message is intended for the property sheet.
    MCIWNDM_REALIZE = 0x0476  # The MCIWNDM_REALIZE message is sent to an MCI window to realize the window.
    PSM_GETCURRENTPAGEHWND = 0x0476  # The PSM_GETCURRENTPAGEHWND message is sent to the property sheet to retrieve the handle to the current page.
    MCIWNDM_SETTIMEFORMATA = 0x0477  # The MCIWNDM_SETTIMEFORMATA message is sent to an MCI window to set the time format.
    PSM_INSERTPAGE = 0x0477  # The PSM_INSERTPAGE message is sent to the property sheet to insert a new page.
    EM_SETLANGOPTIONS = 0x0478  # The EM_SETLANGOPTIONS message is sent to an edit control to set the language options.
    MCIWNDM_GETTIMEFORMATA = 0x0478  # The MCIWNDM_GETTIMEFORMATA message is sent to an MCI window to retrieve the time format.
    PSM_SETTITLEW = 0x0478  # The PSM_SETTITLEW message is sent to the property sheet to set the title of the property sheet.
    WM_CAP_FILE_SET_CAPTURE_FILEW = 0x0478  # The WM_CAP_FILE_SET_CAPTURE_FILEW message is sent to the application to set the file name to use for a file capture operation.
    EM_GETLANGOPTIONS = 0x0479  # The EM_GETLANGOPTIONS message is sent to an edit control to retrieve the language options.
    MCIWNDM_VALIDATEMEDIA = 0x0479  # The MCIWNDM_VALIDATEMEDIA message is sent to an MCI window to determine whether the media is valid.
    PSM_SETFINISHTEXTW = 0x0479  # The PSM_SETFINISHTEXTW message is sent to the property sheet to set the text of the finish button.
    WM_CAP_FILE_GET_CAPTURE_FILEW = 0x0479  # The WM_CAP_FILE_GET_CAPTURE_FILEW message is sent to the application to retrieve the file name used for a file capture operation.
    EM_GETIMECOMPMODE = 0x047a  # The EM_GETIMECOMPMODE message is sent to an edit control to retrieve the IME composition mode.
    EM_FINDTEXTW = 0x047b  # The EM_FINDTEXT message is sent to an edit control to search for a specified string.
    MCIWNDM_PLAYTO = 0x047b  # The MCIWNDM_PLAYTO message is sent to an MCI window to play to a specified time.
    WM_CAP_FILE_SAVEASW = 0x047b  # The WM_CAP_FILE_SAVEASW message is sent to the application to save the current capture file under a new name.
    EM_FINDTEXTEXW = 0x047c  # The EM_FINDTEXTEX message is sent to an edit control to search for a specified string.
    MCIWNDM_GETFILENAMEA = 0x047c  # The MCIWNDM_GETFILENAMEA message is sent to an MCI window to retrieve the file name.
    EM_RECONVERSION = 0x047d  # The EM_RECONVERSION message is sent to an edit control to request a reconversion.
    MCIWNDM_GETDEVICEA = 0x047d  # The MCIWNDM_GETDEVICEA message is sent to an MCI window to retrieve the device name.
    PSM_SETHEADERTITLEA = 0x047d  # The PSM_SETHEADERTITLEA message is sent to the property sheet to set the title of the header.
    WM_CAP_FILE_SAVEDIBW = 0x047d  # The WM_CAP_FILE_SAVEDIBW message is sent to the application to save a DIB file.
    EM_SETIMEMODEBIAS = 0x047e  # The EM_SETIMEMODEBIAS message is sent to an edit control to set the IME mode bias.
    MCIWNDM_GETPALETTE = 0x047e  # The MCIWNDM_GETPALETTE message is sent to an MCI window to retrieve the palette.
    PSM_SETHEADERTITLEW = 0x047e  # The PSM_SETHEADERTITLEW message is sent to the property sheet to set the title of the header.
    EM_GETIMEMODEBIAS = 0x047f  # The EM_GETIMEMODEBIAS message is sent to an edit control to retrieve the IME mode bias.
    MCIWNDM_SETPALETTE = 0x047f  # The MCIWNDM_SETPALETTE message is sent to an MCI window to set the palette.
    PSM_SETHEADERSUBTITLEA = 0x047f  # The PSM_SETHEADERSUBTITLEA message is sent to the property sheet to set the subtitle of the header.
    MCIWNDM_GETERRORA = 0x0480  # The MCIWNDM_GETERRORA message is sent to an MCI window to retrieve the error string.
    PSM_SETHEADERSUBTITLEW = 0x0480  # The PSM_SETHEADERSUBTITLEW message is sent to the property sheet to set the subtitle of the header.
    PSM_HWNDTOINDEX = 0x0481  # The PSM_HWNDTOINDEX message is sent to the property sheet to retrieve the index of a page.
    PSM_INDEXTOHWND = 0x0482  # The PSM_INDEXTOHWND message is sent to the property sheet to retrieve the handle of a page.
    MCIWNDM_SETINACTIVETIMER = 0x0483  # The MCIWNDM_SETINACTIVETIMER message is sent to an MCI window to set the inactivity timer.
    PSM_PAGETOINDEX = 0x0483  # The PSM_PAGETOINDEX message is sent to the property sheet to retrieve the index of a page.
    PSM_INDEXTOPAGE = 0x0484  # The PSM_INDEXTOPAGE message is sent to the property sheet to retrieve the handle of a page.
    DL_BEGINDRAG = 0x0485  # The DL_BEGINDRAG message is sent to the owner of a drag list box to indicate that the user has begun dragging an item.
    MCIWNDM_GETINACTIVETIMER = 0x0485  # The MCIWNDM_GETINACTIVETIMER message is sent to an MCI window to retrieve the inactivity timer.
    PSM_IDTOINDEX = 0x0485  # The PSM_IDTOINDEX message is sent to the property sheet to retrieve the index of a page.
    DL_DRAGGING = 0x0486  # The DL_DRAGGING message is sent to the owner of a drag list box to indicate that the user is dragging an item.
    PSM_INDEXTOID = 0x0486  # The PSM_INDEXTOID message is sent to the property sheet to retrieve the ID of a page.
    DL_DROPPED = 0x0487  # The DL_DROPPED message is sent to the owner of a drag list box to indicate that the user has dropped an item.
    PSM_GETRESULT = 0x0487  # The PSM_GETRESULT message is sent to the property sheet to retrieve the result of the property sheet.
    DL_CANCELDRAG = 0x0488  # The DL_CANCELDRAG message is sent to the owner of a drag list box to indicate that the user has canceled a drag operation.
    PSM_RECALCPAGESIZES = 0x0488  # The PSM_RECALCPAGESIZES message is sent to the property sheet to recalculate the page sizes.
    MCIWNDM_GET_SOURCE = 0x048c  # The MCIWNDM_GET_SOURCE message is sent to an MCI window to retrieve the source file name.
    MCIWNDM_PUT_SOURCE = 0x048d  # The MCIWNDM_PUT_SOURCE message is sent to an MCI window to set the source file name.
    MCIWNDM_GET_DEST = 0x048e  # The MCIWNDM_GET_DEST message is sent to an MCI window to retrieve the destination file name.
    MCIWNDM_PUT_DEST = 0x048f  # The MCIWNDM_PUT_DEST message is sent to an MCI window to set the destination file name.
    MCIWNDM_CAN_PLAY = 0x0490  # The MCIWNDM_CAN_PLAY message is sent to an MCI window to determine whether it can play a file.
    MCIWNDM_CAN_WINDOW = 0x0491  # The MCIWNDM_CAN_WINDOW message is sent to an MCI window to determine whether it can display a window.
    MCIWNDM_CAN_RECORD = 0x0492  # The MCIWNDM_CAN_RECORD message is sent to an MCI window to determine whether it can record a file.
    MCIWNDM_CAN_SAVE = 0x0493  # The MCIWNDM_CAN_SAVE message is sent to an MCI window to determine whether it can save a file.
    MCIWNDM_CAN_EJECT = 0x0494  # The MCIWNDM_CAN_EJECT message is sent to an MCI window to determine whether it can eject a CD.
    MCIWNDM_CAN_CONFIG = 0x0495  # The MCIWNDM_CAN_CONFIG message is sent to an MCI window to determine whether it can configure a device.
    IE_GETINK = 0x0496  # The IE_GETINK message is sent to an edit control to retrieve the ink of the selected text.
    IE_MSGFIRST = 0x0496  # The IE_MSGFIRST message is sent to an edit control to retrieve the ink of the selected text.
    MCIWNDM_PALETTEKICK = 0x0496  # The MCIWNDM_PALETTEKICK message is sent to an MCI window to kick off a palette change.
    IE_SETINK = 0x0497  # The IE_SETINK message is sent to an edit control to set the ink of the selected text.
    IE_GETPENTIP = 0x0498  # The IE_GETPENTIP message is sent to an edit control to retrieve the current pen tip.
    IE_SETPENTIP = 0x0499  # The IE_SETPENTIP message is sent to an edit control to set the current pen tip.
    IE_GETERASERTIP = 0x049a  # The IE_GETERASERTIP message is sent to an edit control to retrieve the current eraser tip.
    IE_SETERASERTIP = 0x049b  # The IE_SETERASERTIP message is sent to an edit control to set the current eraser tip.
    IE_GETBKGND = 0x049c  # The IE_GETBKGND message is sent to an edit control to retrieve the background color.
    IE_SETBKGND = 0x049d  # The IE_SETBKGND message is sent to an edit control to set the background color.
    IE_GETGRIDORIGIN = 0x049e  # The IE_GETGRIDORIGIN message is sent to an edit control to retrieve the grid origin.
    IE_SETGRIDORIGIN = 0x049f  # The IE_SETGRIDORIGIN message is sent to an edit control to set the grid origin.
    IE_GETGRIDPEN = 0x04a0  # The IE_GETGRIDPEN message is sent to an edit control to retrieve the grid pen.
    IE_SETGRIDPEN = 0x04a1  # The IE_SETGRIDPEN message is sent to an edit control to set the grid pen.
    IE_GETGRIDSIZE = 0x04a2  # The IE_GETGRIDSIZE message is sent to an edit control to retrieve the grid size.
    IE_SETGRIDSIZE = 0x04a3  # The IE_SETGRIDSIZE message is sent to an edit control to set the grid size.
    IE_GETMODE = 0x04a4  # The IE_GETMODE message is sent to an edit control to retrieve the current mode.
    IE_SETMODE = 0x04a5  # The IE_SETMODE message is sent to an edit control to set the current mode.
    IE_GETINKRECT = 0x04a6  # The IE_GETINKRECT message is sent to an edit control to retrieve the ink rectangle.
    WM_CAP_SET_MCI_DEVICEW = 0x04a6  # The WM_CAP_SET_MCI_DEVICEW message is sent to the application to set the MCI device name.
    WM_CAP_GET_MCI_DEVICEW = 0x04a7  # The WM_CAP_GET_MCI_DEVICEW message is sent to the application to retrieve the MCI device name.
    WM_CAP_PAL_OPENW = 0x04b4  # The WM_CAP_PAL_OPENW message is sent to the application to open a palette.
    WM_CAP_PAL_SAVEW = 0x04b5  # The WM_CAP_PAL_SAVEW message is sent to the application to save a palette.
    IE_GETAPPDATA = 0x04b8  # The IE_GETAPPDATA message is sent to an edit control to retrieve the application-defined data associated with the edit control.
    IE_SETAPPDATA = 0x04b9  # The IE_SETAPPDATA message is sent to an edit control to associate application-defined data with the edit control.
    IE_GETDRAWOPTS = 0x04ba  # The IE_GETDRAWOPTS message is sent to an edit control to retrieve the drawing options.
    IE_SETDRAWOPTS = 0x04bb  # The IE_SETDRAWOPTS message is sent to an edit control to set the drawing options.
    IE_GETFORMAT = 0x04bc  # The IE_GETFORMAT message is sent to an edit control to retrieve the format of the selected text.
    IE_SETFORMAT = 0x04bd  # The IE_SETFORMAT message is sent to an edit control to set the format of the selected text.
    IE_GETINKINPUT = 0x04be  # The IE_GETINKINPUT message is sent to an edit control to retrieve the ink input mode.
    IE_SETINKINPUT = 0x04bf  # The IE_SETINKINPUT message is sent to an edit control to set the ink input mode.
    IE_GETNOTIFY = 0x04c0  # The IE_GETNOTIFY message is sent to an edit control to retrieve the notification mask.
    IE_SETNOTIFY = 0x04c1  # The IE_SETNOTIFY message is sent to an edit control to set the notification mask.
    IE_GETRECOG = 0x04c2  # The IE_GETRECOG message is sent to an edit control to retrieve the recognition options.
    IE_SETRECOG = 0x04c3  # The IE_SETRECOG message is sent to an edit control to set the recognition options.
    IE_GETSECURITY = 0x04c4  # The IE_GETSECURITY message is sent to an edit control to retrieve the security options.
    IE_SETSECURITY = 0x04c5  # The IE_SETSECURITY message is sent to an edit control to set the security options.
    IE_GETSEL = 0x04c6  # The IE_GETSEL message is sent to an edit control to retrieve the selection.
    IE_SETSEL = 0x04c7  # The IE_SETSEL message is sent to an edit control to set the selection.
    CDM_LAST = 0x04c8  # The CDM_LAST message is sent to the first control in the dialog box to notify the last control in the dialog box.
    EM_SETBIDIOPTIONS = 0x04c8  # The EM_SETBIDIOPTIONS message sets the BiDi options for the edit control.
    IE_DOCOMMAND = 0x04c8  # The IE_DOCOMMAND message is sent to an edit control to execute a command.
    MCIWNDM_NOTIFYMODE = 0x04c8  # The MCIWNDM_NOTIFYMODE message is sent to an MCI window to notify the mode.
    EM_GETBIDIOPTIONS = 0x04c9  # The EM_GETBIDIOPTIONS message retrieves the BiDi options for the edit control.
    IE_GETCOMMAND = 0x04c9  # The IE_GETCOMMAND message is sent to an edit control to retrieve the command.
    EM_SETTYPOGRAPHYOPTIONS = 0x04ca  # The EM_SETTYPOGRAPHYOPTIONS message sets the typography options for the edit control.
    IE_GETCOUNT = 0x04ca  # The IE_GETCOUNT message is sent to an edit control to retrieve the number of characters in the edit control.
    EM_GETTYPOGRAPHYOPTIONS = 0x04cb  # The EM_GETTYPOGRAPHYOPTIONS message retrieves the typography options for the edit control.
    IE_GETGESTURE = 0x04cb  # The IE_GETGESTURE message is sent to an edit control to retrieve the gesture.
    MCIWNDM_NOTIFYMEDIA = 0x04cb  # The MCIWNDM_NOTIFYMEDIA message is sent to an MCI window to notify the media.
    EM_SETEDITSTYLE = 0x04cc  # The EM_SETEDITSTYLE message sets the edit control style.
    IE_GETMENU = 0x04cc  # The IE_GETMENU message is sent to an edit control to retrieve the menu.
    EM_GETEDITSTYLE = 0x04cd  # The EM_GETEDITSTYLE message retrieves the edit control style.
    IE_GETPAINTDC = 0x04cd  # The IE_GETPAINTDC message is sent to an edit control to retrieve the device context for painting.
    MCIWNDM_NOTIFYERROR = 0x04cd  # The MCIWNDM_NOTIFYERROR message is sent to an MCI window to notify the error.
    IE_GETPDEVENT = 0x04ce  # The IE_GETPDEVENT message is sent to an edit control to retrieve the event mask.
    IE_GETSELCOUNT = 0x04cf  # The IE_GETSELCOUNT message is sent to an edit control to retrieve the number of characters in the selection.
    IE_GETSELITEMS = 0x04d0  # The IE_GETSELITEMS message is sent to an edit control to retrieve the selection.
    IE_GETSTYLE = 0x04d1  # The IE_GETSTYLE message is sent to an edit control to retrieve the style.
    MCIWNDM_SETTIMEFORMATW = 0x04db  # The MCIWNDM_SETTIMEFORMATW message is sent to an MCI window to set the time format.
    EM_OUTLINE = 0x04dc  # The EM_OUTLINE message is sent to an edit control to outline the selected text.
    MCIWNDM_GETTIMEFORMATW = 0x04dc  # The MCIWNDM_GETTIMEFORMATW message is sent to an MCI window to retrieve the time format.
    EM_GETSCROLLPOS = 0x04dd  # The EM_GETSCROLLPOS message is sent to an edit control to retrieve the scroll position.
    EM_SETSCROLLPOS = 0x04de  # The EM_SETSCROLLPOS message is sent to an edit control to set the scroll position.
    EM_SETFONTSIZE = 0x04df  # The EM_SETFONTSIZE message is sent to an edit control to set the font size.
    EM_GETZOOM = 0x04e0  # The EM_GETZOOM message is sent to an edit control to retrieve the zoom factor.
    MCIWNDM_GETFILENAMEW = 0x04e0  # The MCIWNDM_GETFILENAMEW message is sent to an MCI window to retrieve the file name.
    EM_SETZOOM = 0x04e1  # The EM_SETZOOM message is sent to an edit control to set the zoom factor.
    MCIWNDM_GETDEVICEW = 0x04e1  # The MCIWNDM_GETDEVICEW message is sent to an MCI window to retrieve the device name.
    EM_GETVIEWKIND = 0x04e2  # The EM_GETVIEWKIND message is sent to an edit control to retrieve the view kind.
    EM_SETVIEWKIND = 0x04e3  # The EM_SETVIEWKIND message is sent to an edit control to set the view kind.
    EM_GETPAGE = 0x04e4  # The EM_GETPAGE message is sent to an edit control to retrieve the page.
    MCIWNDM_GETERRORW = 0x04e4  # The MCIWNDM_GETERRORW message is sent to an MCI window to retrieve the error.
    EM_SETPAGE = 0x04e5  # The EM_SETPAGE message is sent to an edit control to set the page.
    EM_GETHYPHENATEINFO = 0x04e6  # The EM_GETHYPHENATEINFO message is sent to an edit control to retrieve the hyphenation information.
    EM_SETHYPHENATEINFO = 0x04e7  # The EM_SETHYPHENATEINFO message is sent to an edit control to set the hyphenation information.
    EM_GETPAGEROTATE = 0x04eb  # The EM_GETPAGEROTATE message is sent to an edit control to retrieve the page rotation.
    EM_SETPAGEROTATE = 0x04ec  # The EM_SETPAGEROTATE message is sent to an edit control to set the page rotation.
    EM_GETCTFMODEBIAS = 0x04ed  # The EM_GETCTFMODEBIAS message is sent to an edit control to retrieve the CTF mode bias.
    EM_SETCTFMODEBIAS = 0x04ee  # The EM_SETCTFMODEBIAS message is sent to an edit control to set the CTF mode bias.
    EM_GETCTFOPENSTATUS = 0x04f0  # The EM_GETCTFOPENSTATUS message is sent to an edit control to retrieve the CTF open status.
    EM_SETCTFOPENSTATUS = 0x04f1  # The EM_SETCTFOPENSTATUS message is sent to an edit control to set the CTF open status.
    EM_GETIMECOMPTEXT = 0x04f2  # The EM_GETIMECOMPTEXT message is sent to an edit control to retrieve the IME composition text.
    EM_ISIME = 0x04f3  # The EM_ISIME message is sent to an edit control to determine whether the IME is enabled.
    EM_GETIMEPROPERTY = 0x04f4  # The EM_GETIMEPROPERTY message is sent to an edit control to retrieve the IME property.
    EM_GETQUERYRTFOBJ = 0x050d  # The EM_GETQUERYRTFOBJ message is sent to an edit control to retrieve the RTF object.
    EM_SETQUERYRTFOBJ = 0x050e  # The EM_SETQUERYRTFOBJ message is sent to an edit control to set the RTF object.
    FM_GETFOCUS = 0x0600  # The FM_GETFOCUS message is sent to a frame to retrieve the handle of the window that has the focus.
    FM_GETDRIVEINFOA = 0x0601  # The FM_GETDRIVEINFOA message is sent to a frame to retrieve the drive information.
    FM_GETSELCOUNT = 0x0602  # The FM_GETSELCOUNT message is sent to a frame to retrieve the number of selected items.
    FM_GETSELCOUNTLFN = 0x0603  # The FM_GETSELCOUNTLFN message is sent to a frame to retrieve the number of selected items with long file names.
    FM_GETFILESELA = 0x0604  # The FM_GETFILESELA message is sent to a frame to retrieve the file name of the selected item.
    FM_GETFILESELLFNA = 0x0605  # The FM_GETFILESELLFNA message is sent to a frame to retrieve the file name of the selected item with long file names.
    FM_REFRESH_WINDOWS = 0x0606  # The FM_REFRESH_WINDOWS message is sent to a frame to refresh the list of windows.
    FM_RELOAD_EXTENSIONS = 0x0607  # The FM_RELOAD_EXTENSIONS message is sent to a frame to reload the list of extensions.
    FM_GETDRIVEINFOW = 0x0611  # The FM_GETDRIVEINFOW message is sent to a frame to retrieve the drive information.
    FM_GETFILESELW = 0x0614  # The FM_GETFILESELW message is sent to a frame to retrieve the file name of the selected item.
    FM_GETFILESELLFNW = 0x0615  # The FM_GETFILESELLFNW message is sent to a frame to retrieve the file name of the selected item with long file names.
    WLX_WM_SAS = 0x0659  # The WLX_WM_SAS message is sent to a WinLogon service to indicate that the user has logged on successfully.
    SM_GETSELCOUNT = 0x07e8  # The SM_GETSELCOUNT message is sent to an edit control to retrieve the number of selected items.
    UM_GETSELCOUNT = 0x07e8  # The UM_GETSELCOUNT message is sent to an edit control to retrieve the number of selected items.
    WM_CPL_LAUNCH = 0x07e8  # The WM_CPL_LAUNCH message is sent to a control panel application to indicate that the application has been launched.
    SM_GETSERVERSELA = 0x07e9  # The SM_GETSERVERSELA message is sent to an edit control to retrieve the server name of the selected item.
    UM_GETUSERSELA = 0x07e9  # The UM_GETUSERSELA message is sent to an edit control to retrieve the user name of the selected item.
    WM_CPL_LAUNCHED = 0x07e9  # The WM_CPL_LAUNCHED message is sent to a control panel application to indicate that the application has been launched.
    SM_GETSERVERSELW = 0x07ea  # The SM_GETSERVERSELW message is sent to an edit control to retrieve the server name of the selected item.
    UM_GETUSERSELW = 0x07ea  # The UM_GETUSERSELW message is sent to an edit control to retrieve the user name of the selected item.
    SM_GETCURFOCUSA = 0x07eb  # The SM_GETCURFOCUSA message is sent to an edit control to retrieve the current item.
    UM_GETGROUPSELA = 0x07eb  # The UM_GETGROUPSELA message is sent to an edit control to retrieve the group name of the selected item.
    SM_GETCURFOCUSW = 0x07ec  # The SM_GETCURFOCUSW message is sent to an edit control to retrieve the current item.
    UM_GETGROUPSELW = 0x07ec  # The UM_GETGROUPSELW message is sent to an edit control to retrieve the group name of the selected item.
    SM_GETOPTIONS = 0x07ed  # The SM_GETOPTIONS message is sent to an edit control to retrieve the options.
    UM_GETCURFOCUSA = 0x07ed  # The UM_GETCURFOCUSA message is sent to an edit control to retrieve the current item.
    UM_GETCURFOCUSW = 0x07ee  # The UM_GETCURFOCUSW message is sent to an edit control to retrieve the current item.
    UM_GETOPTIONS = 0x07ef  # The UM_GETOPTIONS message is sent to an edit control to retrieve the options.
    UM_GETOPTIONS2 = 0x07f0  # The UM_GETOPTIONS2 message is sent to an edit control to retrieve the options.
    LVM_FIRST = 0x1000  # The LVM_FIRST message is sent to the first list view control or column header in a dialog box.
    LVM_GETBKCOLOR = 0x1000  # The LVM_GETBKCOLOR message is sent to the list view control to retrieve the current background color.
    LVM_SETBKCOLOR = 0x1001  # The LVM_SETBKCOLOR message is sent to the list view control to set the background color.
    LVM_GETIMAGELIST = 0x1002  # The LVM_GETIMAGELIST message is sent to the list view control to retrieve the handle to the image list used to indicate items that are selected.
    LVM_SETIMAGELIST = 0x1003  # The LVM_SETIMAGELIST message is sent to the list view control to set the handle to the image list used to indicate items that are selected.
    LVM_GETITEMCOUNT = 0x1004  # The LVM_GETITEMCOUNT message is sent to the list view control to retrieve the number of items in the list.
    LVM_GETITEMA = 0x1005  # The LVM_GETITEMA message is sent to the list view control to retrieve information about a specific item.
    LVM_SETITEMA = 0x1006  # The LVM_SETITEMA message is sent to the list view control to set information about a specific item.
    LVM_INSERTITEMA = 0x1007  # The LVM_INSERTITEMA message is sent to the list view control to insert a new item at the specified position.
    LVM_DELETEITEM = 0x1008  # The LVM_DELETEITEM message is sent to the list view control to delete the specified item.
    LVM_DELETEALLITEMS = 0x1009  # The LVM_DELETEALLITEMS message is sent to the list view control to delete all items.
    LVM_GETCALLBACKMASK = 0x100a  # The LVM_GETCALLBACKMASK message is sent to the list view control to retrieve the callback mask.
    LVM_SETCALLBACKMASK = 0x100b  # The LVM_SETCALLBACKMASK message is sent to the list view control to set the callback mask.
    LVM_GETNEXTITEM = 0x100c  # The LVM_GETNEXTITEM message is sent to the list view control to retrieve the handle to the next item.
    LVM_FINDITEMA = 0x100d  # The LVM_FINDITEMA message is sent to the list view control to retrieve the handle to the item that matches the specified criteria.
    LVM_GETITEMRECT = 0x100e  # The LVM_GETITEMRECT message is sent to the list view control to retrieve the bounding rectangle of the specified item.
    LVM_SETITEMPOSITION = 0x100f  # The LVM_SETITEMPOSITION message is sent to the list view control to set the position of the specified item.
    LVM_GETITEMPOSITION = 0x1010  # The LVM_GETITEMPOSITION message is sent to the list view control to retrieve the position of the specified item.
    LVM_GETSTRINGWIDTHA = 0x1011  # The LVM_GETSTRINGWIDTHA message is sent to the list view control to retrieve the width, in pixels, of the specified string.
    LVM_HITTEST = 0x1012  # The LVM_HITTEST message is sent to the list view control to determine the position of the specified point.
    LVM_ENSUREVISIBLE = 0x1013  # The LVM_ENSUREVISIBLE message is sent to the list view control to ensure that the specified item is visible.
    LVM_SCROLL = 0x1014  # The LVM_SCROLL message is sent to the list view control to scroll the list view control.
    LVM_REDRAWITEMS = 0x1015  # The LVM_REDRAWITEMS message is sent to the list view control to redraw the specified items.
    LVM_ARRANGE = 0x1016  # The LVM_ARRANGE message is sent to the list view control to arrange the items.
    LVM_EDITLABELA = 0x1017  # The LVM_EDITLABELA message is sent to the list view control to edit the label of the specified item.
    LVM_GETEDITCONTROL = 0x1018  # The LVM_GETEDITCONTROL message is sent to the list view control to retrieve the handle to the edit control used to edit the label of the specified item.
    LVM_GETCOLUMNA = 0x1019  # The LVM_GETCOLUMNA message is sent to the list view control to retrieve information about a specific column.
    LVM_SETCOLUMNA = 0x101a  # The LVM_SETCOLUMNA message is sent to the list view control to set information about a specific column.
    LVM_INSERTCOLUMNA = 0x101b  # The LVM_INSERTCOLUMNA message is sent to the list view control to insert a new column.
    LVM_DELETECOLUMN = 0x101c  # The LVM_DELETECOLUMN message is sent to the list view control to delete the specified column.
    LVM_GETCOLUMNWIDTH = 0x101d  # The LVM_GETCOLUMNWIDTH message is sent to the list view control to retrieve the width, in pixels, of the specified column.
    LVM_SETCOLUMNWIDTH = 0x101e  # The LVM_SETCOLUMNWIDTH message is sent to the list view control to set the width, in pixels, of the specified column.
    LVM_GETHEADER = 0x101f  # The LVM_GETHEADER message is sent to the list view control to retrieve the handle to the header control.
    LVM_CREATEDRAGIMAGE = 0x1021  # The LVM_CREATEDRAGIMAGE message is sent to the list view control to create a drag image.
    LVM_GETVIEWRECT = 0x1022  # The LVM_GETVIEWRECT message is sent to the list view control to retrieve the bounding rectangle of the list view control.
    LVM_GETTEXTCOLOR = 0x1023  # The LVM_GETTEXTCOLOR message is sent to the list view control to retrieve the text color.
    LVM_SETTEXTCOLOR = 0x1024  # The LVM_SETTEXTCOLOR message is sent to the list view control to set the text color.
    LVM_GETTEXTBKCOLOR = 0x1025  # The LVM_GETTEXTBKCOLOR message is sent to the list view control to retrieve the text background color.
    LVM_SETTEXTBKCOLOR = 0x1026  # The LVM_SETTEXTBKCOLOR message is sent to the list view control to set the text background color.
    LVM_GETTOPINDEX = 0x1027  # The LVM_GETTOPINDEX message is sent to the list view control to retrieve the index of the topmost visible item.
    LVM_GETCOUNTPERPAGE = 0x1028  # The LVM_GETCOUNTPERPAGE message is sent to the list view control to retrieve the number of items that can be displayed on a page.
    LVM_GETORIGIN = 0x1029  # The LVM_GETORIGIN message is sent to the list view control to retrieve the origin of the list view control.
    LVM_UPDATE = 0x102a  # The LVM_UPDATE message is sent to the list view control to force an update of the list view control.
    LVM_SETITEMSTATE = 0x102b  # The LVM_SETITEMSTATE message is sent to the list view control to set the state of the specified item.
    LVM_GETITEMSTATE = 0x102c  # The LVM_GETITEMSTATE message is sent to the list view control to retrieve the state of the specified item.
    LVM_GETITEMTEXTA = 0x102d  # The LVM_GETITEMTEXTA message is sent to the list view control to retrieve the text of the specified item.
    LVM_SETITEMTEXTA = 0x102e  # The LVM_SETITEMTEXTA message is sent to the list view control to set the text of the specified item.
    LVM_SETITEMCOUNT = 0x102f  # The LVM_SETITEMCOUNT message is sent to the list view control to set the number of items in the list view control.
    LVM_SORTITEMS = 0x1030  # The LVM_SORTITEMS message is sent to the list view control to sort the items in the list view control.
    LVM_SETITEMPOSITION32 = 0x1031
    LVM_GETSELECTEDCOUNT = 0x1032  # The LVM_GETSELECTEDCOUNT message is sent to the list view control to retrieve the number of selected items.
    LVM_GETITEMSPACING = 0x1033  # The LVM_GETITEMSPACING message is sent to the list view control to retrieve the spacing between items.
    LVM_GETISEARCHSTRINGA = 0x1034  # The LVM_GETISEARCHSTRINGA message is sent to the list view control to retrieve the search string.
    LVM_SETICONSPACING = 0x1035  # The LVM_SETICONSPACING message is sent to the list view control to set the spacing between icons.
    LVM_SETEXTENDEDLISTVIEWSTYLE = 0x1036  # The LVM_SETEXTENDEDLISTVIEWSTYLE message is sent to the list view control to set the extended list view style.
    LVM_GETEXTENDEDLISTVIEWSTYLE = 0x1037  # The LVM_GETEXTENDEDLISTVIEWSTYLE message is sent to the list view control to retrieve the extended list view style.
    LVM_GETSUBITEMRECT = 0x1038  # The LVM_GETSUBITEMRECT message is sent to the list view control to retrieve the bounding rectangle of the specified subitem.
    LVM_SUBITEMHITTEST = 0x1039  # The LVM_SUBITEMHITTEST message is sent to the list view control to determine which subitem is at the specified point.
    LVM_SETCOLUMNORDERARRAY = 0x103a  # The LVM_SETCOLUMNORDERARRAY message is sent to the list view control to set the order of columns.
    LVM_GETCOLUMNORDERARRAY = 0x103b  # The LVM_GETCOLUMNORDERARRAY message is sent to the list view control to retrieve the order of columns.
    LVM_SETHOTITEM = 0x103c  # The LVM_SETHOTITEM message is sent to the list view control to set the hot item.
    LVM_GETHOTITEM = 0x103d  # The LVM_GETHOTITEM message is sent to the list view control to retrieve the hot item.
    LVM_SETHOTCURSOR = 0x103e  # The LVM_SETHOTCURSOR message is sent to the list view control to set the hot cursor.
    LVM_GETHOTCURSOR = 0x103f  # The LVM_GETHOTCURSOR message is sent to the list view control to retrieve the hot cursor.
    LVM_APPROXIMATEVIEWRECT = 0x1040  # The LVM_APPROXIMATEVIEWRECT message is sent to the list view control to retrieve the approximate size of the list view control.
    LVM_SETWORKAREAS = 0x1041  # The LVM_SETWORKAREAS message is sent to the list view control to set the work area.
    LVM_GETSELECTIONMARK = 0x1042  # The LVM_GETSELECTIONMARK message is sent to the list view control to retrieve the selection mark.
    LVM_SETSELECTIONMARK = 0x1043  # The LVM_SETSELECTIONMARK message is sent to the list view control to set the selection mark.
    LVM_SETBKIMAGEA = 0x1044  # The LVM_SETBKIMAGEA message is sent to the list view control to set the background image.
    LVM_GETBKIMAGEA = 0x1045  # The LVM_GETBKIMAGEA message is sent to the list view control to retrieve the background image.
    LVM_GETWORKAREAS = 0x1046  # The LVM_GETWORKAREAS message is sent to the list view control to retrieve the work area.
    LVM_SETHOVERTIME = 0x1047  # The LVM_SETHOVERTIME message is sent to the list view control to set the hover time.
    LVM_GETHOVERTIME = 0x1048  # The LVM_GETHOVERTIME message is sent to the list view control to retrieve the hover time.
    LVM_GETNUMBEROFWORKAREAS = 0x1049  # The LVM_GETNUMBEROFWORKAREAS message is sent to the list view control to retrieve the number of work areas.
    LVM_SETTOOLTIPS = 0x104a  # The LVM_SETTOOLTIPS message is sent to the list view control to set the tool tips.
    LVM_GETITEMW = 0x104b  # The LVM_GETITEMW message is sent to the list view control to retrieve the text of the specified item.
    LVM_SETITEMW = 0x104c  # The LVM_SETITEMW message is sent to the list view control to set the text of the specified item.
    LVM_INSERTITEMW = 0x104d  # The LVM_INSERTITEMW message is sent to the list view control to insert the specified item.
    LVM_GETTOOLTIPS = 0x104e  # The LVM_GETTOOLTIPS message is sent to the list view control to retrieve the tool tips.
    LVM_FINDITEMW = 0x1053  # The LVM_FINDITEMW message is sent to the list view control to search for an item.
    LVM_GETSTRINGWIDTHW = 0x1057  # The LVM_GETSTRINGWIDTHW message is sent to the list view control to retrieve the width, in pixels, of the specified string.
    LVM_GETCOLUMNW = 0x105f  # The LVM_GETCOLUMNW message is sent to the list view control to retrieve the width, in pixels, of the specified column.
    LVM_SETCOLUMNW = 0x1060  # The LVM_SETCOLUMNW message is sent to the list view control to set the width, in pixels, of the specified column.
    LVM_INSERTCOLUMNW = 0x1061  # The LVM_INSERTCOLUMNW message is sent to the list view control to insert the specified column.
    LVM_GETITEMTEXTW = 0x1073  # The LVM_GETITEMTEXTW message is sent to the list view control to retrieve the text of the specified item.
    LVM_SETITEMTEXTW = 0x1074  # The LVM_SETITEMTEXTW message is sent to the list view control to set the text of the specified item.
    LVM_GETISEARCHSTRINGW = 0x1075  # The LVM_GETISEARCHSTRINGW message is sent to the list view control to retrieve the search string.
    LVM_EDITLABELW = 0x1076  # The LVM_EDITLABELW message is sent to the list view control to edit the label of the specified item.
    LVM_GETBKIMAGEW = 0x108b  # The LVM_GETBKIMAGEW message is sent to the list view control to retrieve the background image.
    LVM_SETSELECTEDCOLUMN = 0x108c  # The LVM_SETSELECTEDCOLUMN message is sent to the list view control to set the selected column.
    LVM_SETTILEWIDTH = 0x108d  # The LVM_SETTILEWIDTH message is sent to the list view control to set the width of the tile.
    LVM_SETVIEW = 0x108e  # The LVM_SETVIEW message is sent to the list view control to set the view.
    LVM_GETVIEW = 0x108f  # The LVM_GETVIEW message is sent to the list view control to retrieve the view.
    LVM_INSERTGROUP = 0x1091  # The LVM_INSERTGROUP message is sent to the list view control to insert a group.
    LVM_SETGROUPINFO = 0x1093  # The LVM_SETGROUPINFO message is sent to the list view control to set the information of the specified group.
    LVM_GETGROUPINFO = 0x1095  # The LVM_GETGROUPINFO message is sent to the list view control to retrieve the information of the specified group.
    LVM_REMOVEGROUP = 0x1096  # The LVM_REMOVEGROUP message is sent to the list view control to remove the specified group.
    LVM_MOVEGROUP = 0x1097  # The LVM_MOVEGROUP message is sent to the list view control to move the specified group.
    LVM_MOVEITEMTOGROUP = 0x109a  # The LVM_MOVEITEMTOGROUP message is sent to the list view control to move the specified item to the specified group.
    LVM_SETGROUPMETRICS = 0x109b  # The LVM_SETGROUPMETRICS message is sent to the list view control to set the metrics of the specified group.
    LVM_GETGROUPMETRICS = 0x109c  # The LVM_GETGROUPMETRICS message is sent to the list view control to retrieve the metrics of the specified group.
    LVM_ENABLEGROUPVIEW = 0x109d  # The LVM_ENABLEGROUPVIEW message is sent to the list view control to enable the group view.
    LVM_SORTGROUPS = 0x109e  # The LVM_SORTGROUPS message is sent to the list view control to sort the groups.
    LVM_INSERTGROUPSORTED = 0x109f  # The LVM_INSERTGROUPSORTED message is sent to the list view control to insert the specified group in the sorted order.
    LVM_REMOVEALLGROUPS = 0x10a0  # The LVM_REMOVEALLGROUPS message is sent to the list view control to remove all groups.
    LVM_HASGROUP = 0x10a1  # The LVM_HASGROUP message is sent to the list view control to determine whether the specified group exists.
    LVM_SETTILEVIEWINFO = 0x10a2  # The LVM_SETTILEVIEWINFO message is sent to the list view control to set the information of the tile view.
    LVM_GETTILEVIEWINFO = 0x10a3  # The LVM_GETTILEVIEWINFO message is sent to the list view control to retrieve the information of the tile view.
    LVM_SETTILEINFO = 0x10a4  # The LVM_SETTILEINFO message is sent to the list view control to set the information of the specified tile.
    LVM_GETTILEINFO = 0x10a5  # The LVM_GETTILEINFO message is sent to the list view control to retrieve the information of the specified tile.
    LVM_SETINSERTMARK = 0x10a6  # The LVM_SETINSERTMARK message is sent to the list view control to set the insert mark.
    LVM_GETINSERTMARK = 0x10a7  # The LVM_GETINSERTMARK message is sent to the list view control to retrieve the insert mark.
    LVM_INSERTMARKHITTEST = 0x10a8  # The LVM_INSERTMARKHITTEST message is sent to the list view control to determine whether the insert mark is hit.
    LVM_GETINSERTMARKRECT = 0x10a9  # The LVM_GETINSERTMARKRECT message is sent to the list view control to retrieve the insert mark rectangle.
    LVM_SETINSERTMARKCOLOR = 0x10aa  # The LVM_SETINSERTMARKCOLOR message is sent to the list view control to set the insert mark color.
    LVM_GETINSERTMARKCOLOR = 0x10ab  # The LVM_GETINSERTMARKCOLOR message is sent to the list view control to retrieve the insert mark color.
    LVM_SETINFOTIP = 0x10ad  # The LVM_SETINFOTIP message is sent to the list view control to set the information tip.
    LVM_GETSELECTEDCOLUMN = 0x10ae  # The LVM_GETSELECTEDCOLUMN message is sent to the list view control to retrieve the selected column.
    LVM_ISGROUPVIEWENABLED = 0x10af  # The LVM_ISGROUPVIEWENABLED message is sent to the list view control to determine whether the group view is enabled.
    LVM_GETOUTLINECOLOR = 0x10b0  # The LVM_GETOUTLINECOLOR message is sent to the list view control to retrieve the outline color.
    LVM_SETOUTLINECOLOR = 0x10b1  # The LVM_SETOUTLINECOLOR message is sent to the list view control to set the outline color.
    LVM_CANCELEDITLABEL = 0x10b3  # The LVM_CANCELEDITLABEL message is sent to the list view control to cancel the editing of the label.
    LVM_MAPINDEXTOID = 0x10b4  # The LVM_MAPINDEXTOID message is sent to the list view control to map the index to the identifier.
    LVM_MAPIDTOINDEX = 0x10b5  # The LVM_MAPIDTOINDEX message is sent to the list view control to map the identifier to the index.
    LVM_ISITEMVISIBLE = 0x10b6  # The LVM_ISITEMVISIBLE message is sent to the list view control to determine whether the specified item is visible.
    LVM_GETEMPTYTEXT = 0x10cc  # The LVM_GETEMPTYTEXT message is sent to the list view control to retrieve the empty text.
    LVM_GETFOOTERRECT = 0x10cd  # The LVM_GETFOOTERRECT message is sent to the list view control to retrieve the footer rectangle.
    LVM_GETFOOTERINFO = 0x10ce  # The LVM_GETFOOTERINFO message is sent to the list view control to retrieve the footer information.
    LVM_GETFOOTERITEMRECT = 0x10cf  # The LVM_GETFOOTERITEMRECT message is sent to the list view control to retrieve the footer item rectangle.
    LVM_GETFOOTERITEM = 0x10d0  # The LVM_GETFOOTERITEM message is sent to the list view control to retrieve the footer item.
    LVM_GETITEMINDEXRECT = 0x10d1  # The LVM_GETITEMINDEXRECT message is sent to the list view control to retrieve the item index rectangle.
    LVM_SETITEMINDEXSTATE = 0x10d2  # The LVM_SETITEMINDEXSTATE message is sent to the list view control to set the item index state.
    LVM_GETNEXTITEMINDEX = 0x10d3  # The LVM_GETNEXTITEMINDEX message is sent to the list view control to retrieve the next item index.
    OCM__BASE = 0x2000  # The OCM__BASE message is used as a base for the range of messages used by the list view control.
    LVM_SETUNICODEFORMAT = 0x2005  # The LVM_SETUNICODEFORMAT message is sent to the list view control to set the Unicode format.
    LVM_GETUNICODEFORMAT = 0x2006  # The LVM_GETUNICODEFORMAT message is sent to the list view control to retrieve the Unicode format.
    OCM_CTLCOLOR = 0x2019  # The OCM_CTLCOLOR message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_DRAWITEM = 0x202b  # The OCM_DRAWITEM message is sent to the parent window of a control when a visual aspect of the control has changed.
    OCM_MEASUREITEM = 0x202c  # The OCM_MEASUREITEM message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_DELETEITEM = 0x202d  # The OCM_DELETEITEM message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_VKEYTOITEM = 0x202e  # The OCM_VKEYTOITEM message is sent to the parent window of a control when a key is pressed.
    OCM_CHARTOITEM = 0x202f  # The OCM_CHARTOITEM message is sent to the parent window of a control when a key is pressed.
    OCM_COMPAREITEM = 0x2039  # The OCM_COMPAREITEM message is sent to the parent window of a control when a key is pressed.
    OCM_NOTIFY = 0x204e  # The OCM_NOTIFY message is sent to the parent window of a control when a control event has occurred or the control needs to be redrawn.
    OCM_COMMAND = 0x2111  # The OCM_COMMAND message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_HSCROLL = 0x2114  # The OCM_HSCROLL message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_VSCROLL = 0x2115  # The OCM_VSCROLL message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_CTLCOLORMSGBOX = 0x2132  # The OCM_CTLCOLORMSGBOX message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_CTLCOLOREDIT = 0x2133  # The OCM_CTLCOLOREDIT message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_CTLCOLORLISTBOX = 0x2134  # The OCM_CTLCOLORLISTBOX message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_CTLCOLORBTN = 0x2135  # The OCM_CTLCOLORBTN message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_CTLCOLORDLG = 0x2136  # The OCM_CTLCOLORDLG message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_CTLCOLORSCROLLBAR = 0x2137  # The OCM_CTLCOLORSCROLLBAR message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_CTLCOLORSTATIC = 0x2138  # The OCM_CTLCOLORSTATIC message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    OCM_PARENTNOTIFY = 0x2210  # The OCM_PARENTNOTIFY message is sent to the parent window of a control when the control is about to be drawn in a non-client area.
    WM_APP = 0x8000  # The WM_APP message is used as a base for application-defined messages.
    WM_RASDIALEVENT = 0xcccd  # The WM_RASDIALEVENT message is sent to the window procedure of a window that is receiving a RAS connection event.


button_down_msg = {
    Button.VK_LBUTTON: Message.WM_LBUTTONDOWN,
    Button.VK_RBUTTON: Message.WM_RBUTTONDOWN,
    Button.VK_MBUTTON: Message.WM_MBUTTONDOWN,
    Button.VK_XBUTTON1: Message.WM_XBUTTONDOWN,
    Button.VK_XBUTTON2: Message.WM_XBUTTONDOWN,
}

button_up_msg = {
    Button.VK_LBUTTON: Message.WM_LBUTTONUP,
    Button.VK_RBUTTON: Message.WM_RBUTTONUP,
    Button.VK_MBUTTON: Message.WM_MBUTTONUP,
    Button.VK_XBUTTON1: Message.WM_XBUTTONUP,
    Button.VK_XBUTTON2: Message.WM_XBUTTONUP,
}
